{"C:\\Users\\Steph\\OneDrive\\Documents\\Programming-stuff\\GitHub\\GridFS-file-tree-manager\\src\\index.ts":{"path":"C:\\Users\\Steph\\OneDrive\\Documents\\Programming-stuff\\GitHub\\GridFS-file-tree-manager\\src\\index.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":18},"end":{"line":15,"column":36}},"16":{"start":{"line":16,"column":17},"end":{"line":16,"column":34}},"17":{"start":{"line":17,"column":16},"end":{"line":17,"column":49}},"18":{"start":{"line":73,"column":8},"end":{"line":73,"column":69}},"19":{"start":{"line":74,"column":8},"end":{"line":74,"column":61}},"20":{"start":{"line":75,"column":8},"end":{"line":75,"column":91}},"21":{"start":{"line":76,"column":8},"end":{"line":76,"column":43}},"22":{"start":{"line":77,"column":8},"end":{"line":77,"column":58}},"23":{"start":{"line":78,"column":8},"end":{"line":78,"column":38}},"24":{"start":{"line":84,"column":8},"end":{"line":84,"column":24}},"25":{"start":{"line":90,"column":8},"end":{"line":90,"column":28}},"26":{"start":{"line":96,"column":8},"end":{"line":96,"column":32}},"27":{"start":{"line":103,"column":8},"end":{"line":103,"column":42}},"28":{"start":{"line":111,"column":8},"end":{"line":111,"column":45}},"29":{"start":{"line":117,"column":8},"end":{"line":117,"column":28}},"30":{"start":{"line":136,"column":8},"end":{"line":151,"column":12}},"31":{"start":{"line":136,"column":48},"end":{"line":151,"column":10}},"32":{"start":{"line":137,"column":12},"end":{"line":150,"column":16}},"33":{"start":{"line":137,"column":39},"end":{"line":150,"column":14}},"34":{"start":{"line":138,"column":29},"end":{"line":138,"column":76}},"35":{"start":{"line":139,"column":40},"end":{"line":139,"column":128}},"36":{"start":{"line":140,"column":16},"end":{"line":142,"column":17}},"37":{"start":{"line":141,"column":20},"end":{"line":141,"column":119}},"38":{"start":{"line":143,"column":16},"end":{"line":147,"column":17}},"39":{"start":{"line":145,"column":38},"end":{"line":145,"column":89}},"40":{"start":{"line":146,"column":20},"end":{"line":146,"column":113}},"41":{"start":{"line":148,"column":31},"end":{"line":148,"column":220}},"42":{"start":{"line":149,"column":16},"end":{"line":149,"column":32}},"43":{"start":{"line":165,"column":8},"end":{"line":173,"column":11}},"44":{"start":{"line":166,"column":12},"end":{"line":172,"column":16}},"45":{"start":{"line":166,"column":39},"end":{"line":172,"column":14}},"46":{"start":{"line":167,"column":29},"end":{"line":167,"column":125}},"47":{"start":{"line":168,"column":16},"end":{"line":170,"column":17}},"48":{"start":{"line":169,"column":20},"end":{"line":169,"column":90}},"49":{"start":{"line":171,"column":16},"end":{"line":171,"column":67}},"50":{"start":{"line":190,"column":8},"end":{"line":220,"column":11}},"51":{"start":{"line":191,"column":12},"end":{"line":219,"column":16}},"52":{"start":{"line":191,"column":39},"end":{"line":219,"column":14}},"53":{"start":{"line":192,"column":34},"end":{"line":192,"column":55}},"54":{"start":{"line":193,"column":38},"end":{"line":206,"column":18}},"55":{"start":{"line":193,"column":48},"end":{"line":206,"column":18}},"56":{"start":{"line":194,"column":20},"end":{"line":205,"column":23}},"57":{"start":{"line":195,"column":47},"end":{"line":195,"column":88}},"58":{"start":{"line":196,"column":35},"end":{"line":196,"column":37}},"59":{"start":{"line":197,"column":24},"end":{"line":199,"column":27}},"60":{"start":{"line":198,"column":28},"end":{"line":198,"column":61}},"61":{"start":{"line":200,"column":24},"end":{"line":204,"column":27}},"62":{"start":{"line":202,"column":28},"end":{"line":202,"column":184}},"63":{"start":{"line":203,"column":28},"end":{"line":203,"column":50}},"64":{"start":{"line":207,"column":34},"end":{"line":207,"column":119}},"65":{"start":{"line":208,"column":16},"end":{"line":210,"column":17}},"66":{"start":{"line":209,"column":20},"end":{"line":209,"column":94}},"67":{"start":{"line":211,"column":16},"end":{"line":213,"column":17}},"68":{"start":{"line":212,"column":20},"end":{"line":212,"column":202}},"69":{"start":{"line":214,"column":33},"end":{"line":214,"column":155}},"70":{"start":{"line":215,"column":16},"end":{"line":217,"column":17}},"71":{"start":{"line":216,"column":20},"end":{"line":216,"column":46}},"72":{"start":{"line":218,"column":16},"end":{"line":218,"column":84}},"73":{"start":{"line":243,"column":8},"end":{"line":269,"column":11}},"74":{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},"75":{"start":{"line":245,"column":16},"end":{"line":245,"column":109}},"76":{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},"77":{"start":{"line":248,"column":16},"end":{"line":248,"column":93}},"78":{"start":{"line":250,"column":12},"end":{"line":252,"column":13}},"79":{"start":{"line":251,"column":16},"end":{"line":251,"column":98}},"80":{"start":{"line":253,"column":12},"end":{"line":256,"column":13}},"81":{"start":{"line":255,"column":16},"end":{"line":255,"column":151}},"82":{"start":{"line":257,"column":25},"end":{"line":257,"column":74}},"83":{"start":{"line":258,"column":12},"end":{"line":268,"column":15}},"84":{"start":{"line":259,"column":16},"end":{"line":259,"column":178}},"85":{"start":{"line":260,"column":37},"end":{"line":263,"column":18}},"86":{"start":{"line":264,"column":16},"end":{"line":264,"column":46}},"87":{"start":{"line":265,"column":16},"end":{"line":267,"column":20}},"88":{"start":{"line":265,"column":48},"end":{"line":267,"column":18}},"89":{"start":{"line":266,"column":20},"end":{"line":266,"column":45}},"90":{"start":{"line":283,"column":8},"end":{"line":298,"column":11}},"91":{"start":{"line":284,"column":12},"end":{"line":297,"column":16}},"92":{"start":{"line":284,"column":39},"end":{"line":297,"column":14}},"93":{"start":{"line":286,"column":40},"end":{"line":286,"column":88}},"94":{"start":{"line":287,"column":16},"end":{"line":289,"column":17}},"95":{"start":{"line":288,"column":20},"end":{"line":288,"column":90}},"96":{"start":{"line":290,"column":16},"end":{"line":293,"column":17}},"97":{"start":{"line":292,"column":20},"end":{"line":292,"column":150}},"98":{"start":{"line":294,"column":40},"end":{"line":294,"column":189}},"99":{"start":{"line":295,"column":16},"end":{"line":295,"column":197}},"100":{"start":{"line":296,"column":16},"end":{"line":296,"column":26}},"101":{"start":{"line":316,"column":8},"end":{"line":368,"column":11}},"102":{"start":{"line":317,"column":12},"end":{"line":367,"column":16}},"103":{"start":{"line":317,"column":39},"end":{"line":367,"column":14}},"104":{"start":{"line":319,"column":16},"end":{"line":321,"column":17}},"105":{"start":{"line":320,"column":20},"end":{"line":320,"column":115}},"106":{"start":{"line":323,"column":16},"end":{"line":325,"column":17}},"107":{"start":{"line":324,"column":20},"end":{"line":324,"column":126}},"108":{"start":{"line":327,"column":16},"end":{"line":329,"column":17}},"109":{"start":{"line":328,"column":20},"end":{"line":328,"column":131}},"110":{"start":{"line":330,"column":16},"end":{"line":365,"column":17}},"111":{"start":{"line":331,"column":20},"end":{"line":338,"column":21}},"112":{"start":{"line":332,"column":39},"end":{"line":332,"column":41}},"113":{"start":{"line":333,"column":24},"end":{"line":336,"column":27}},"114":{"start":{"line":335,"column":28},"end":{"line":335,"column":77}},"115":{"start":{"line":337,"column":24},"end":{"line":337,"column":139}},"116":{"start":{"line":339,"column":20},"end":{"line":346,"column":21}},"117":{"start":{"line":340,"column":39},"end":{"line":340,"column":41}},"118":{"start":{"line":341,"column":24},"end":{"line":344,"column":27}},"119":{"start":{"line":343,"column":28},"end":{"line":343,"column":61}},"120":{"start":{"line":345,"column":24},"end":{"line":345,"column":141}},"121":{"start":{"line":349,"column":20},"end":{"line":356,"column":21}},"122":{"start":{"line":350,"column":39},"end":{"line":350,"column":41}},"123":{"start":{"line":351,"column":24},"end":{"line":354,"column":27}},"124":{"start":{"line":353,"column":28},"end":{"line":353,"column":77}},"125":{"start":{"line":355,"column":24},"end":{"line":355,"column":172}},"126":{"start":{"line":357,"column":20},"end":{"line":364,"column":21}},"127":{"start":{"line":358,"column":39},"end":{"line":358,"column":41}},"128":{"start":{"line":359,"column":24},"end":{"line":362,"column":27}},"129":{"start":{"line":361,"column":28},"end":{"line":361,"column":61}},"130":{"start":{"line":363,"column":24},"end":{"line":363,"column":174}},"131":{"start":{"line":366,"column":16},"end":{"line":366,"column":26}},"132":{"start":{"line":384,"column":8},"end":{"line":415,"column":11}},"133":{"start":{"line":385,"column":12},"end":{"line":414,"column":16}},"134":{"start":{"line":385,"column":39},"end":{"line":414,"column":14}},"135":{"start":{"line":387,"column":16},"end":{"line":389,"column":17}},"136":{"start":{"line":388,"column":20},"end":{"line":388,"column":115}},"137":{"start":{"line":391,"column":16},"end":{"line":393,"column":17}},"138":{"start":{"line":392,"column":20},"end":{"line":392,"column":126}},"139":{"start":{"line":395,"column":16},"end":{"line":397,"column":17}},"140":{"start":{"line":396,"column":20},"end":{"line":396,"column":111}},"141":{"start":{"line":398,"column":16},"end":{"line":405,"column":17}},"142":{"start":{"line":399,"column":35},"end":{"line":399,"column":37}},"143":{"start":{"line":400,"column":20},"end":{"line":403,"column":23}},"144":{"start":{"line":402,"column":24},"end":{"line":402,"column":79}},"145":{"start":{"line":404,"column":20},"end":{"line":404,"column":133}},"146":{"start":{"line":406,"column":16},"end":{"line":412,"column":17}},"147":{"start":{"line":407,"column":35},"end":{"line":407,"column":37}},"148":{"start":{"line":408,"column":20},"end":{"line":410,"column":23}},"149":{"start":{"line":409,"column":24},"end":{"line":409,"column":63}},"150":{"start":{"line":411,"column":20},"end":{"line":411,"column":135}},"151":{"start":{"line":413,"column":16},"end":{"line":413,"column":26}},"152":{"start":{"line":431,"column":8},"end":{"line":477,"column":11}},"153":{"start":{"line":432,"column":12},"end":{"line":476,"column":16}},"154":{"start":{"line":432,"column":39},"end":{"line":476,"column":14}},"155":{"start":{"line":433,"column":16},"end":{"line":435,"column":17}},"156":{"start":{"line":434,"column":20},"end":{"line":434,"column":94}},"157":{"start":{"line":436,"column":34},"end":{"line":436,"column":119}},"158":{"start":{"line":438,"column":16},"end":{"line":440,"column":17}},"159":{"start":{"line":439,"column":20},"end":{"line":439,"column":94}},"160":{"start":{"line":441,"column":40},"end":{"line":441,"column":221}},"161":{"start":{"line":442,"column":16},"end":{"line":444,"column":17}},"162":{"start":{"line":443,"column":20},"end":{"line":443,"column":118}},"163":{"start":{"line":445,"column":16},"end":{"line":445,"column":124}},"164":{"start":{"line":446,"column":16},"end":{"line":450,"column":17}},"165":{"start":{"line":448,"column":38},"end":{"line":448,"column":86}},"166":{"start":{"line":449,"column":20},"end":{"line":449,"column":113}},"167":{"start":{"line":451,"column":16},"end":{"line":451,"column":152}},"168":{"start":{"line":452,"column":16},"end":{"line":463,"column":30}},"169":{"start":{"line":464,"column":16},"end":{"line":474,"column":30}},"170":{"start":{"line":475,"column":16},"end":{"line":475,"column":26}},"171":{"start":{"line":502,"column":8},"end":{"line":520,"column":11}},"172":{"start":{"line":503,"column":12},"end":{"line":519,"column":16}},"173":{"start":{"line":503,"column":39},"end":{"line":519,"column":14}},"174":{"start":{"line":505,"column":16},"end":{"line":510,"column":17}},"175":{"start":{"line":506,"column":20},"end":{"line":506,"column":40}},"176":{"start":{"line":509,"column":20},"end":{"line":509,"column":78}},"177":{"start":{"line":511,"column":31},"end":{"line":511,"column":118}},"178":{"start":{"line":512,"column":16},"end":{"line":518,"column":17}},"179":{"start":{"line":513,"column":20},"end":{"line":513,"column":65}},"180":{"start":{"line":514,"column":20},"end":{"line":514,"column":30}},"181":{"start":{"line":517,"column":20},"end":{"line":517,"column":96}},"182":{"start":{"line":537,"column":8},"end":{"line":557,"column":11}},"183":{"start":{"line":538,"column":12},"end":{"line":556,"column":16}},"184":{"start":{"line":538,"column":39},"end":{"line":556,"column":14}},"185":{"start":{"line":540,"column":16},"end":{"line":542,"column":17}},"186":{"start":{"line":541,"column":20},"end":{"line":541,"column":123}},"187":{"start":{"line":543,"column":34},"end":{"line":543,"column":119}},"188":{"start":{"line":544,"column":16},"end":{"line":546,"column":17}},"189":{"start":{"line":545,"column":20},"end":{"line":545,"column":94}},"190":{"start":{"line":547,"column":33},"end":{"line":547,"column":155}},"191":{"start":{"line":548,"column":16},"end":{"line":550,"column":17}},"192":{"start":{"line":549,"column":20},"end":{"line":549,"column":109}},"193":{"start":{"line":551,"column":16},"end":{"line":551,"column":134}},"194":{"start":{"line":552,"column":16},"end":{"line":554,"column":17}},"195":{"start":{"line":553,"column":20},"end":{"line":553,"column":108}},"196":{"start":{"line":555,"column":16},"end":{"line":555,"column":26}},"197":{"start":{"line":571,"column":8},"end":{"line":583,"column":11}},"198":{"start":{"line":572,"column":12},"end":{"line":582,"column":16}},"199":{"start":{"line":572,"column":39},"end":{"line":582,"column":14}},"200":{"start":{"line":573,"column":40},"end":{"line":573,"column":88}},"201":{"start":{"line":574,"column":16},"end":{"line":576,"column":17}},"202":{"start":{"line":575,"column":20},"end":{"line":575,"column":90}},"203":{"start":{"line":577,"column":43},"end":{"line":577,"column":74}},"204":{"start":{"line":578,"column":16},"end":{"line":580,"column":17}},"205":{"start":{"line":579,"column":20},"end":{"line":579,"column":56}},"206":{"start":{"line":581,"column":16},"end":{"line":581,"column":26}},"207":{"start":{"line":586,"column":0},"end":{"line":586,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":78},"end":{"line":79,"column":5}},"line":72},"9":{"name":"(anonymous_9)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":13},"end":{"line":85,"column":5}},"line":83},"10":{"name":"(anonymous_10)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":17},"end":{"line":91,"column":5}},"line":89},"11":{"name":"(anonymous_11)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":21},"end":{"line":97,"column":5}},"line":95},"12":{"name":"(anonymous_12)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":31},"end":{"line":104,"column":5}},"line":102},"13":{"name":"(anonymous_13)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":34},"end":{"line":112,"column":5}},"line":110},"14":{"name":"(anonymous_14)","decl":{"start":{"line":116,"column":4},"end":{"line":116,"column":5}},"loc":{"start":{"line":116,"column":17},"end":{"line":118,"column":5}},"line":116},"15":{"name":"(anonymous_15)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":45},"end":{"line":152,"column":5}},"line":135},"16":{"name":"(anonymous_16)","decl":{"start":{"line":136,"column":27},"end":{"line":136,"column":28}},"loc":{"start":{"line":136,"column":48},"end":{"line":151,"column":10}},"line":136},"17":{"name":"(anonymous_17)","decl":{"start":{"line":136,"column":80},"end":{"line":136,"column":81}},"loc":{"start":{"line":136,"column":93},"end":{"line":151,"column":9}},"line":136},"18":{"name":"(anonymous_18)","decl":{"start":{"line":137,"column":33},"end":{"line":137,"column":34}},"loc":{"start":{"line":137,"column":39},"end":{"line":150,"column":14}},"line":137},"19":{"name":"(anonymous_19)","decl":{"start":{"line":137,"column":71},"end":{"line":137,"column":72}},"loc":{"start":{"line":137,"column":84},"end":{"line":150,"column":13}},"line":137},"20":{"name":"(anonymous_20)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":32},"end":{"line":174,"column":5}},"line":164},"21":{"name":"(anonymous_21)","decl":{"start":{"line":165,"column":27},"end":{"line":165,"column":28}},"loc":{"start":{"line":165,"column":48},"end":{"line":173,"column":9}},"line":165},"22":{"name":"(anonymous_22)","decl":{"start":{"line":166,"column":33},"end":{"line":166,"column":34}},"loc":{"start":{"line":166,"column":39},"end":{"line":172,"column":14}},"line":166},"23":{"name":"(anonymous_23)","decl":{"start":{"line":166,"column":71},"end":{"line":166,"column":72}},"loc":{"start":{"line":166,"column":84},"end":{"line":172,"column":13}},"line":166},"24":{"name":"(anonymous_24)","decl":{"start":{"line":189,"column":4},"end":{"line":189,"column":5}},"loc":{"start":{"line":189,"column":43},"end":{"line":221,"column":5}},"line":189},"25":{"name":"(anonymous_25)","decl":{"start":{"line":190,"column":27},"end":{"line":190,"column":28}},"loc":{"start":{"line":190,"column":48},"end":{"line":220,"column":9}},"line":190},"26":{"name":"(anonymous_26)","decl":{"start":{"line":191,"column":33},"end":{"line":191,"column":34}},"loc":{"start":{"line":191,"column":39},"end":{"line":219,"column":14}},"line":191},"27":{"name":"(anonymous_27)","decl":{"start":{"line":191,"column":71},"end":{"line":191,"column":72}},"loc":{"start":{"line":191,"column":84},"end":{"line":219,"column":13}},"line":191},"28":{"name":"(anonymous_28)","decl":{"start":{"line":193,"column":38},"end":{"line":193,"column":39}},"loc":{"start":{"line":193,"column":48},"end":{"line":206,"column":18}},"line":193},"29":{"name":"(anonymous_29)","decl":{"start":{"line":193,"column":80},"end":{"line":193,"column":81}},"loc":{"start":{"line":193,"column":93},"end":{"line":206,"column":17}},"line":193},"30":{"name":"(anonymous_30)","decl":{"start":{"line":194,"column":39},"end":{"line":194,"column":40}},"loc":{"start":{"line":194,"column":64},"end":{"line":205,"column":21}},"line":194},"31":{"name":"(anonymous_31)","decl":{"start":{"line":197,"column":50},"end":{"line":197,"column":51}},"loc":{"start":{"line":197,"column":61},"end":{"line":199,"column":25}},"line":197},"32":{"name":"(anonymous_32)","decl":{"start":{"line":200,"column":49},"end":{"line":200,"column":50}},"loc":{"start":{"line":200,"column":55},"end":{"line":204,"column":25}},"line":200},"33":{"name":"(anonymous_33)","decl":{"start":{"line":242,"column":4},"end":{"line":242,"column":5}},"loc":{"start":{"line":242,"column":36},"end":{"line":270,"column":5}},"line":242},"34":{"name":"(anonymous_34)","decl":{"start":{"line":243,"column":27},"end":{"line":243,"column":28}},"loc":{"start":{"line":243,"column":48},"end":{"line":269,"column":9}},"line":243},"35":{"name":"(anonymous_35)","decl":{"start":{"line":258,"column":33},"end":{"line":258,"column":34}},"loc":{"start":{"line":258,"column":39},"end":{"line":268,"column":13}},"line":258},"36":{"name":"(anonymous_36)","decl":{"start":{"line":265,"column":42},"end":{"line":265,"column":43}},"loc":{"start":{"line":265,"column":48},"end":{"line":267,"column":18}},"line":265},"37":{"name":"(anonymous_37)","decl":{"start":{"line":265,"column":80},"end":{"line":265,"column":81}},"loc":{"start":{"line":265,"column":93},"end":{"line":267,"column":17}},"line":265},"38":{"name":"(anonymous_38)","decl":{"start":{"line":282,"column":4},"end":{"line":282,"column":5}},"loc":{"start":{"line":282,"column":38},"end":{"line":299,"column":5}},"line":282},"39":{"name":"(anonymous_39)","decl":{"start":{"line":283,"column":27},"end":{"line":283,"column":28}},"loc":{"start":{"line":283,"column":48},"end":{"line":298,"column":9}},"line":283},"40":{"name":"(anonymous_40)","decl":{"start":{"line":284,"column":33},"end":{"line":284,"column":34}},"loc":{"start":{"line":284,"column":39},"end":{"line":297,"column":14}},"line":284},"41":{"name":"(anonymous_41)","decl":{"start":{"line":284,"column":71},"end":{"line":284,"column":72}},"loc":{"start":{"line":284,"column":84},"end":{"line":297,"column":13}},"line":284},"42":{"name":"(anonymous_42)","decl":{"start":{"line":315,"column":4},"end":{"line":315,"column":5}},"loc":{"start":{"line":315,"column":90},"end":{"line":369,"column":5}},"line":315},"43":{"name":"(anonymous_43)","decl":{"start":{"line":316,"column":27},"end":{"line":316,"column":28}},"loc":{"start":{"line":316,"column":48},"end":{"line":368,"column":9}},"line":316},"44":{"name":"(anonymous_44)","decl":{"start":{"line":317,"column":33},"end":{"line":317,"column":34}},"loc":{"start":{"line":317,"column":39},"end":{"line":367,"column":14}},"line":317},"45":{"name":"(anonymous_45)","decl":{"start":{"line":317,"column":71},"end":{"line":317,"column":72}},"loc":{"start":{"line":317,"column":84},"end":{"line":367,"column":13}},"line":317},"46":{"name":"(anonymous_46)","decl":{"start":{"line":333,"column":57},"end":{"line":333,"column":58}},"loc":{"start":{"line":333,"column":68},"end":{"line":336,"column":25}},"line":333},"47":{"name":"(anonymous_47)","decl":{"start":{"line":341,"column":45},"end":{"line":341,"column":46}},"loc":{"start":{"line":341,"column":56},"end":{"line":344,"column":25}},"line":341},"48":{"name":"(anonymous_48)","decl":{"start":{"line":351,"column":57},"end":{"line":351,"column":58}},"loc":{"start":{"line":351,"column":68},"end":{"line":354,"column":25}},"line":351},"49":{"name":"(anonymous_49)","decl":{"start":{"line":359,"column":45},"end":{"line":359,"column":46}},"loc":{"start":{"line":359,"column":56},"end":{"line":362,"column":25}},"line":359},"50":{"name":"(anonymous_50)","decl":{"start":{"line":383,"column":4},"end":{"line":383,"column":5}},"loc":{"start":{"line":383,"column":64},"end":{"line":416,"column":5}},"line":383},"51":{"name":"(anonymous_51)","decl":{"start":{"line":384,"column":27},"end":{"line":384,"column":28}},"loc":{"start":{"line":384,"column":48},"end":{"line":415,"column":9}},"line":384},"52":{"name":"(anonymous_52)","decl":{"start":{"line":385,"column":33},"end":{"line":385,"column":34}},"loc":{"start":{"line":385,"column":39},"end":{"line":414,"column":14}},"line":385},"53":{"name":"(anonymous_53)","decl":{"start":{"line":385,"column":71},"end":{"line":385,"column":72}},"loc":{"start":{"line":385,"column":84},"end":{"line":414,"column":13}},"line":385},"54":{"name":"(anonymous_54)","decl":{"start":{"line":400,"column":53},"end":{"line":400,"column":54}},"loc":{"start":{"line":400,"column":64},"end":{"line":403,"column":21}},"line":400},"55":{"name":"(anonymous_55)","decl":{"start":{"line":408,"column":41},"end":{"line":408,"column":42}},"loc":{"start":{"line":408,"column":52},"end":{"line":410,"column":21}},"line":408},"56":{"name":"(anonymous_56)","decl":{"start":{"line":430,"column":4},"end":{"line":430,"column":5}},"loc":{"start":{"line":430,"column":42},"end":{"line":478,"column":5}},"line":430},"57":{"name":"(anonymous_57)","decl":{"start":{"line":431,"column":27},"end":{"line":431,"column":28}},"loc":{"start":{"line":431,"column":48},"end":{"line":477,"column":9}},"line":431},"58":{"name":"(anonymous_58)","decl":{"start":{"line":432,"column":33},"end":{"line":432,"column":34}},"loc":{"start":{"line":432,"column":39},"end":{"line":476,"column":14}},"line":432},"59":{"name":"(anonymous_59)","decl":{"start":{"line":432,"column":71},"end":{"line":432,"column":72}},"loc":{"start":{"line":432,"column":84},"end":{"line":476,"column":13}},"line":432},"60":{"name":"(anonymous_60)","decl":{"start":{"line":501,"column":4},"end":{"line":501,"column":5}},"loc":{"start":{"line":501,"column":46},"end":{"line":521,"column":5}},"line":501},"61":{"name":"(anonymous_61)","decl":{"start":{"line":502,"column":27},"end":{"line":502,"column":28}},"loc":{"start":{"line":502,"column":48},"end":{"line":520,"column":9}},"line":502},"62":{"name":"(anonymous_62)","decl":{"start":{"line":503,"column":33},"end":{"line":503,"column":34}},"loc":{"start":{"line":503,"column":39},"end":{"line":519,"column":14}},"line":503},"63":{"name":"(anonymous_63)","decl":{"start":{"line":503,"column":71},"end":{"line":503,"column":72}},"loc":{"start":{"line":503,"column":84},"end":{"line":519,"column":13}},"line":503},"64":{"name":"(anonymous_64)","decl":{"start":{"line":536,"column":4},"end":{"line":536,"column":5}},"loc":{"start":{"line":536,"column":29},"end":{"line":558,"column":5}},"line":536},"65":{"name":"(anonymous_65)","decl":{"start":{"line":537,"column":27},"end":{"line":537,"column":28}},"loc":{"start":{"line":537,"column":48},"end":{"line":557,"column":9}},"line":537},"66":{"name":"(anonymous_66)","decl":{"start":{"line":538,"column":33},"end":{"line":538,"column":34}},"loc":{"start":{"line":538,"column":39},"end":{"line":556,"column":14}},"line":538},"67":{"name":"(anonymous_67)","decl":{"start":{"line":538,"column":71},"end":{"line":538,"column":72}},"loc":{"start":{"line":538,"column":84},"end":{"line":556,"column":13}},"line":538},"68":{"name":"(anonymous_68)","decl":{"start":{"line":570,"column":4},"end":{"line":570,"column":5}},"loc":{"start":{"line":570,"column":25},"end":{"line":584,"column":5}},"line":570},"69":{"name":"(anonymous_69)","decl":{"start":{"line":571,"column":27},"end":{"line":571,"column":28}},"loc":{"start":{"line":571,"column":48},"end":{"line":583,"column":9}},"line":571},"70":{"name":"(anonymous_70)","decl":{"start":{"line":572,"column":33},"end":{"line":572,"column":34}},"loc":{"start":{"line":572,"column":39},"end":{"line":582,"column":14}},"line":572},"71":{"name":"(anonymous_71)","decl":{"start":{"line":572,"column":71},"end":{"line":572,"column":72}},"loc":{"start":{"line":572,"column":84},"end":{"line":582,"column":13}},"line":572}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12},"8":{"loc":{"start":{"line":140,"column":16},"end":{"line":142,"column":17}},"type":"if","locations":[{"start":{"line":140,"column":16},"end":{"line":142,"column":17}},{"start":{"line":140,"column":16},"end":{"line":142,"column":17}}],"line":140},"9":{"loc":{"start":{"line":143,"column":16},"end":{"line":147,"column":17}},"type":"if","locations":[{"start":{"line":143,"column":16},"end":{"line":147,"column":17}},{"start":{"line":143,"column":16},"end":{"line":147,"column":17}}],"line":143},"10":{"loc":{"start":{"line":168,"column":16},"end":{"line":170,"column":17}},"type":"if","locations":[{"start":{"line":168,"column":16},"end":{"line":170,"column":17}},{"start":{"line":168,"column":16},"end":{"line":170,"column":17}}],"line":168},"11":{"loc":{"start":{"line":202,"column":43},"end":{"line":202,"column":137}},"type":"cond-expr","locations":[{"start":{"line":202,"column":92},"end":{"line":202,"column":98}},{"start":{"line":202,"column":101},"end":{"line":202,"column":137}}],"line":202},"12":{"loc":{"start":{"line":202,"column":43},"end":{"line":202,"column":89}},"type":"binary-expr","locations":[{"start":{"line":202,"column":43},"end":{"line":202,"column":72}},{"start":{"line":202,"column":76},"end":{"line":202,"column":89}}],"line":202},"13":{"loc":{"start":{"line":208,"column":16},"end":{"line":210,"column":17}},"type":"if","locations":[{"start":{"line":208,"column":16},"end":{"line":210,"column":17}},{"start":{"line":208,"column":16},"end":{"line":210,"column":17}}],"line":208},"14":{"loc":{"start":{"line":208,"column":20},"end":{"line":208,"column":75}},"type":"binary-expr","locations":[{"start":{"line":208,"column":20},"end":{"line":208,"column":30}},{"start":{"line":208,"column":34},"end":{"line":208,"column":75}}],"line":208},"15":{"loc":{"start":{"line":211,"column":16},"end":{"line":213,"column":17}},"type":"if","locations":[{"start":{"line":211,"column":16},"end":{"line":213,"column":17}},{"start":{"line":211,"column":16},"end":{"line":213,"column":17}}],"line":211},"16":{"loc":{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},"type":"if","locations":[{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},{"start":{"line":244,"column":12},"end":{"line":246,"column":13}}],"line":244},"17":{"loc":{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},"type":"if","locations":[{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},{"start":{"line":247,"column":12},"end":{"line":249,"column":13}}],"line":247},"18":{"loc":{"start":{"line":250,"column":12},"end":{"line":252,"column":13}},"type":"if","locations":[{"start":{"line":250,"column":12},"end":{"line":252,"column":13}},{"start":{"line":250,"column":12},"end":{"line":252,"column":13}}],"line":250},"19":{"loc":{"start":{"line":253,"column":12},"end":{"line":256,"column":13}},"type":"if","locations":[{"start":{"line":253,"column":12},"end":{"line":256,"column":13}},{"start":{"line":253,"column":12},"end":{"line":256,"column":13}}],"line":253},"20":{"loc":{"start":{"line":287,"column":16},"end":{"line":289,"column":17}},"type":"if","locations":[{"start":{"line":287,"column":16},"end":{"line":289,"column":17}},{"start":{"line":287,"column":16},"end":{"line":289,"column":17}}],"line":287},"21":{"loc":{"start":{"line":290,"column":16},"end":{"line":293,"column":17}},"type":"if","locations":[{"start":{"line":290,"column":16},"end":{"line":293,"column":17}},{"start":{"line":290,"column":16},"end":{"line":293,"column":17}}],"line":290},"22":{"loc":{"start":{"line":294,"column":40},"end":{"line":294,"column":189}},"type":"cond-expr","locations":[{"start":{"line":294,"column":162},"end":{"line":294,"column":168}},{"start":{"line":294,"column":171},"end":{"line":294,"column":189}}],"line":294},"23":{"loc":{"start":{"line":294,"column":40},"end":{"line":294,"column":159}},"type":"binary-expr","locations":[{"start":{"line":294,"column":40},"end":{"line":294,"column":142}},{"start":{"line":294,"column":146},"end":{"line":294,"column":159}}],"line":294},"24":{"loc":{"start":{"line":294,"column":46},"end":{"line":294,"column":132}},"type":"cond-expr","locations":[{"start":{"line":294,"column":112},"end":{"line":294,"column":118}},{"start":{"line":294,"column":121},"end":{"line":294,"column":132}}],"line":294},"25":{"loc":{"start":{"line":294,"column":46},"end":{"line":294,"column":109}},"type":"binary-expr","locations":[{"start":{"line":294,"column":46},"end":{"line":294,"column":92}},{"start":{"line":294,"column":96},"end":{"line":294,"column":109}}],"line":294},"26":{"loc":{"start":{"line":315,"column":60},"end":{"line":315,"column":88}},"type":"default-arg","locations":[{"start":{"line":315,"column":83},"end":{"line":315,"column":88}}],"line":315},"27":{"loc":{"start":{"line":319,"column":16},"end":{"line":321,"column":17}},"type":"if","locations":[{"start":{"line":319,"column":16},"end":{"line":321,"column":17}},{"start":{"line":319,"column":16},"end":{"line":321,"column":17}}],"line":319},"28":{"loc":{"start":{"line":319,"column":20},"end":{"line":319,"column":191}},"type":"binary-expr","locations":[{"start":{"line":319,"column":21},"end":{"line":319,"column":95}},{"start":{"line":319,"column":101},"end":{"line":319,"column":190}}],"line":319},"29":{"loc":{"start":{"line":319,"column":21},"end":{"line":319,"column":95}},"type":"cond-expr","locations":[{"start":{"line":319,"column":70},"end":{"line":319,"column":76}},{"start":{"line":319,"column":79},"end":{"line":319,"column":95}}],"line":319},"30":{"loc":{"start":{"line":319,"column":21},"end":{"line":319,"column":67}},"type":"binary-expr","locations":[{"start":{"line":319,"column":21},"end":{"line":319,"column":41}},{"start":{"line":319,"column":45},"end":{"line":319,"column":67}}],"line":319},"31":{"loc":{"start":{"line":319,"column":101},"end":{"line":319,"column":190}},"type":"cond-expr","locations":[{"start":{"line":319,"column":152},"end":{"line":319,"column":158}},{"start":{"line":319,"column":161},"end":{"line":319,"column":190}}],"line":319},"32":{"loc":{"start":{"line":319,"column":101},"end":{"line":319,"column":149}},"type":"binary-expr","locations":[{"start":{"line":319,"column":101},"end":{"line":319,"column":122}},{"start":{"line":319,"column":126},"end":{"line":319,"column":149}}],"line":319},"33":{"loc":{"start":{"line":323,"column":16},"end":{"line":325,"column":17}},"type":"if","locations":[{"start":{"line":323,"column":16},"end":{"line":325,"column":17}},{"start":{"line":323,"column":16},"end":{"line":325,"column":17}}],"line":323},"34":{"loc":{"start":{"line":323,"column":20},"end":{"line":323,"column":213}},"type":"binary-expr","locations":[{"start":{"line":323,"column":21},"end":{"line":323,"column":106}},{"start":{"line":323,"column":112},"end":{"line":323,"column":212}}],"line":323},"35":{"loc":{"start":{"line":323,"column":21},"end":{"line":323,"column":106}},"type":"cond-expr","locations":[{"start":{"line":323,"column":70},"end":{"line":323,"column":76}},{"start":{"line":323,"column":79},"end":{"line":323,"column":106}}],"line":323},"36":{"loc":{"start":{"line":323,"column":21},"end":{"line":323,"column":67}},"type":"binary-expr","locations":[{"start":{"line":323,"column":21},"end":{"line":323,"column":41}},{"start":{"line":323,"column":45},"end":{"line":323,"column":67}}],"line":323},"37":{"loc":{"start":{"line":323,"column":112},"end":{"line":323,"column":212}},"type":"cond-expr","locations":[{"start":{"line":323,"column":163},"end":{"line":323,"column":169}},{"start":{"line":323,"column":172},"end":{"line":323,"column":212}}],"line":323},"38":{"loc":{"start":{"line":323,"column":112},"end":{"line":323,"column":160}},"type":"binary-expr","locations":[{"start":{"line":323,"column":112},"end":{"line":323,"column":133}},{"start":{"line":323,"column":137},"end":{"line":323,"column":160}}],"line":323},"39":{"loc":{"start":{"line":327,"column":16},"end":{"line":329,"column":17}},"type":"if","locations":[{"start":{"line":327,"column":16},"end":{"line":329,"column":17}},{"start":{"line":327,"column":16},"end":{"line":329,"column":17}}],"line":327},"40":{"loc":{"start":{"line":327,"column":20},"end":{"line":327,"column":199}},"type":"binary-expr","locations":[{"start":{"line":327,"column":21},"end":{"line":327,"column":99}},{"start":{"line":327,"column":105},"end":{"line":327,"column":198}}],"line":327},"41":{"loc":{"start":{"line":327,"column":21},"end":{"line":327,"column":99}},"type":"cond-expr","locations":[{"start":{"line":327,"column":70},"end":{"line":327,"column":76}},{"start":{"line":327,"column":79},"end":{"line":327,"column":99}}],"line":327},"42":{"loc":{"start":{"line":327,"column":21},"end":{"line":327,"column":67}},"type":"binary-expr","locations":[{"start":{"line":327,"column":21},"end":{"line":327,"column":41}},{"start":{"line":327,"column":45},"end":{"line":327,"column":67}}],"line":327},"43":{"loc":{"start":{"line":327,"column":105},"end":{"line":327,"column":198}},"type":"cond-expr","locations":[{"start":{"line":327,"column":156},"end":{"line":327,"column":162}},{"start":{"line":327,"column":165},"end":{"line":327,"column":198}}],"line":327},"44":{"loc":{"start":{"line":327,"column":105},"end":{"line":327,"column":153}},"type":"binary-expr","locations":[{"start":{"line":327,"column":105},"end":{"line":327,"column":126}},{"start":{"line":327,"column":130},"end":{"line":327,"column":153}}],"line":327},"45":{"loc":{"start":{"line":330,"column":16},"end":{"line":365,"column":17}},"type":"if","locations":[{"start":{"line":330,"column":16},"end":{"line":365,"column":17}},{"start":{"line":330,"column":16},"end":{"line":365,"column":17}}],"line":330},"46":{"loc":{"start":{"line":331,"column":20},"end":{"line":338,"column":21}},"type":"if","locations":[{"start":{"line":331,"column":20},"end":{"line":338,"column":21}},{"start":{"line":331,"column":20},"end":{"line":338,"column":21}}],"line":331},"47":{"loc":{"start":{"line":339,"column":20},"end":{"line":346,"column":21}},"type":"if","locations":[{"start":{"line":339,"column":20},"end":{"line":346,"column":21}},{"start":{"line":339,"column":20},"end":{"line":346,"column":21}}],"line":339},"48":{"loc":{"start":{"line":349,"column":20},"end":{"line":356,"column":21}},"type":"if","locations":[{"start":{"line":349,"column":20},"end":{"line":356,"column":21}},{"start":{"line":349,"column":20},"end":{"line":356,"column":21}}],"line":349},"49":{"loc":{"start":{"line":357,"column":20},"end":{"line":364,"column":21}},"type":"if","locations":[{"start":{"line":357,"column":20},"end":{"line":364,"column":21}},{"start":{"line":357,"column":20},"end":{"line":364,"column":21}}],"line":357},"50":{"loc":{"start":{"line":387,"column":16},"end":{"line":389,"column":17}},"type":"if","locations":[{"start":{"line":387,"column":16},"end":{"line":389,"column":17}},{"start":{"line":387,"column":16},"end":{"line":389,"column":17}}],"line":387},"51":{"loc":{"start":{"line":387,"column":20},"end":{"line":387,"column":191}},"type":"binary-expr","locations":[{"start":{"line":387,"column":21},"end":{"line":387,"column":95}},{"start":{"line":387,"column":101},"end":{"line":387,"column":190}}],"line":387},"52":{"loc":{"start":{"line":387,"column":21},"end":{"line":387,"column":95}},"type":"cond-expr","locations":[{"start":{"line":387,"column":70},"end":{"line":387,"column":76}},{"start":{"line":387,"column":79},"end":{"line":387,"column":95}}],"line":387},"53":{"loc":{"start":{"line":387,"column":21},"end":{"line":387,"column":67}},"type":"binary-expr","locations":[{"start":{"line":387,"column":21},"end":{"line":387,"column":41}},{"start":{"line":387,"column":45},"end":{"line":387,"column":67}}],"line":387},"54":{"loc":{"start":{"line":387,"column":101},"end":{"line":387,"column":190}},"type":"cond-expr","locations":[{"start":{"line":387,"column":152},"end":{"line":387,"column":158}},{"start":{"line":387,"column":161},"end":{"line":387,"column":190}}],"line":387},"55":{"loc":{"start":{"line":387,"column":101},"end":{"line":387,"column":149}},"type":"binary-expr","locations":[{"start":{"line":387,"column":101},"end":{"line":387,"column":122}},{"start":{"line":387,"column":126},"end":{"line":387,"column":149}}],"line":387},"56":{"loc":{"start":{"line":391,"column":16},"end":{"line":393,"column":17}},"type":"if","locations":[{"start":{"line":391,"column":16},"end":{"line":393,"column":17}},{"start":{"line":391,"column":16},"end":{"line":393,"column":17}}],"line":391},"57":{"loc":{"start":{"line":391,"column":20},"end":{"line":391,"column":213}},"type":"binary-expr","locations":[{"start":{"line":391,"column":21},"end":{"line":391,"column":106}},{"start":{"line":391,"column":112},"end":{"line":391,"column":212}}],"line":391},"58":{"loc":{"start":{"line":391,"column":21},"end":{"line":391,"column":106}},"type":"cond-expr","locations":[{"start":{"line":391,"column":70},"end":{"line":391,"column":76}},{"start":{"line":391,"column":79},"end":{"line":391,"column":106}}],"line":391},"59":{"loc":{"start":{"line":391,"column":21},"end":{"line":391,"column":67}},"type":"binary-expr","locations":[{"start":{"line":391,"column":21},"end":{"line":391,"column":41}},{"start":{"line":391,"column":45},"end":{"line":391,"column":67}}],"line":391},"60":{"loc":{"start":{"line":391,"column":112},"end":{"line":391,"column":212}},"type":"cond-expr","locations":[{"start":{"line":391,"column":163},"end":{"line":391,"column":169}},{"start":{"line":391,"column":172},"end":{"line":391,"column":212}}],"line":391},"61":{"loc":{"start":{"line":391,"column":112},"end":{"line":391,"column":160}},"type":"binary-expr","locations":[{"start":{"line":391,"column":112},"end":{"line":391,"column":133}},{"start":{"line":391,"column":137},"end":{"line":391,"column":160}}],"line":391},"62":{"loc":{"start":{"line":395,"column":16},"end":{"line":397,"column":17}},"type":"if","locations":[{"start":{"line":395,"column":16},"end":{"line":397,"column":17}},{"start":{"line":395,"column":16},"end":{"line":397,"column":17}}],"line":395},"63":{"loc":{"start":{"line":395,"column":20},"end":{"line":395,"column":199}},"type":"binary-expr","locations":[{"start":{"line":395,"column":21},"end":{"line":395,"column":99}},{"start":{"line":395,"column":105},"end":{"line":395,"column":198}}],"line":395},"64":{"loc":{"start":{"line":395,"column":21},"end":{"line":395,"column":99}},"type":"cond-expr","locations":[{"start":{"line":395,"column":70},"end":{"line":395,"column":76}},{"start":{"line":395,"column":79},"end":{"line":395,"column":99}}],"line":395},"65":{"loc":{"start":{"line":395,"column":21},"end":{"line":395,"column":67}},"type":"binary-expr","locations":[{"start":{"line":395,"column":21},"end":{"line":395,"column":41}},{"start":{"line":395,"column":45},"end":{"line":395,"column":67}}],"line":395},"66":{"loc":{"start":{"line":395,"column":105},"end":{"line":395,"column":198}},"type":"cond-expr","locations":[{"start":{"line":395,"column":156},"end":{"line":395,"column":162}},{"start":{"line":395,"column":165},"end":{"line":395,"column":198}}],"line":395},"67":{"loc":{"start":{"line":395,"column":105},"end":{"line":395,"column":153}},"type":"binary-expr","locations":[{"start":{"line":395,"column":105},"end":{"line":395,"column":126}},{"start":{"line":395,"column":130},"end":{"line":395,"column":153}}],"line":395},"68":{"loc":{"start":{"line":398,"column":16},"end":{"line":405,"column":17}},"type":"if","locations":[{"start":{"line":398,"column":16},"end":{"line":405,"column":17}},{"start":{"line":398,"column":16},"end":{"line":405,"column":17}}],"line":398},"69":{"loc":{"start":{"line":406,"column":16},"end":{"line":412,"column":17}},"type":"if","locations":[{"start":{"line":406,"column":16},"end":{"line":412,"column":17}},{"start":{"line":406,"column":16},"end":{"line":412,"column":17}}],"line":406},"70":{"loc":{"start":{"line":433,"column":16},"end":{"line":435,"column":17}},"type":"if","locations":[{"start":{"line":433,"column":16},"end":{"line":435,"column":17}},{"start":{"line":433,"column":16},"end":{"line":435,"column":17}}],"line":433},"71":{"loc":{"start":{"line":438,"column":16},"end":{"line":440,"column":17}},"type":"if","locations":[{"start":{"line":438,"column":16},"end":{"line":440,"column":17}},{"start":{"line":438,"column":16},"end":{"line":440,"column":17}}],"line":438},"72":{"loc":{"start":{"line":438,"column":20},"end":{"line":438,"column":75}},"type":"binary-expr","locations":[{"start":{"line":438,"column":20},"end":{"line":438,"column":30}},{"start":{"line":438,"column":34},"end":{"line":438,"column":75}}],"line":438},"73":{"loc":{"start":{"line":441,"column":121},"end":{"line":441,"column":200}},"type":"cond-expr","locations":[{"start":{"line":441,"column":166},"end":{"line":441,"column":172}},{"start":{"line":441,"column":175},"end":{"line":441,"column":200}}],"line":441},"74":{"loc":{"start":{"line":441,"column":121},"end":{"line":441,"column":163}},"type":"binary-expr","locations":[{"start":{"line":441,"column":121},"end":{"line":441,"column":139}},{"start":{"line":441,"column":143},"end":{"line":441,"column":163}}],"line":441},"75":{"loc":{"start":{"line":442,"column":16},"end":{"line":444,"column":17}},"type":"if","locations":[{"start":{"line":442,"column":16},"end":{"line":444,"column":17}},{"start":{"line":442,"column":16},"end":{"line":444,"column":17}}],"line":442},"76":{"loc":{"start":{"line":445,"column":27},"end":{"line":445,"column":106}},"type":"cond-expr","locations":[{"start":{"line":445,"column":72},"end":{"line":445,"column":78}},{"start":{"line":445,"column":81},"end":{"line":445,"column":106}}],"line":445},"77":{"loc":{"start":{"line":445,"column":27},"end":{"line":445,"column":69}},"type":"binary-expr","locations":[{"start":{"line":445,"column":27},"end":{"line":445,"column":45}},{"start":{"line":445,"column":49},"end":{"line":445,"column":69}}],"line":445},"78":{"loc":{"start":{"line":446,"column":16},"end":{"line":450,"column":17}},"type":"if","locations":[{"start":{"line":446,"column":16},"end":{"line":450,"column":17}},{"start":{"line":446,"column":16},"end":{"line":450,"column":17}}],"line":446},"79":{"loc":{"start":{"line":501,"column":26},"end":{"line":501,"column":44}},"type":"default-arg","locations":[{"start":{"line":501,"column":39},"end":{"line":501,"column":44}}],"line":501},"80":{"loc":{"start":{"line":505,"column":16},"end":{"line":510,"column":17}},"type":"if","locations":[{"start":{"line":505,"column":16},"end":{"line":510,"column":17}},{"start":{"line":505,"column":16},"end":{"line":510,"column":17}}],"line":505},"81":{"loc":{"start":{"line":512,"column":16},"end":{"line":518,"column":17}},"type":"if","locations":[{"start":{"line":512,"column":16},"end":{"line":518,"column":17}},{"start":{"line":512,"column":16},"end":{"line":518,"column":17}}],"line":512},"82":{"loc":{"start":{"line":512,"column":20},"end":{"line":512,"column":73}},"type":"binary-expr","locations":[{"start":{"line":512,"column":20},"end":{"line":512,"column":26}},{"start":{"line":512,"column":30},"end":{"line":512,"column":73}}],"line":512},"83":{"loc":{"start":{"line":540,"column":16},"end":{"line":542,"column":17}},"type":"if","locations":[{"start":{"line":540,"column":16},"end":{"line":542,"column":17}},{"start":{"line":540,"column":16},"end":{"line":542,"column":17}}],"line":540},"84":{"loc":{"start":{"line":540,"column":20},"end":{"line":540,"column":112}},"type":"binary-expr","locations":[{"start":{"line":540,"column":20},"end":{"line":540,"column":67}},{"start":{"line":540,"column":71},"end":{"line":540,"column":112}}],"line":540},"85":{"loc":{"start":{"line":544,"column":16},"end":{"line":546,"column":17}},"type":"if","locations":[{"start":{"line":544,"column":16},"end":{"line":546,"column":17}},{"start":{"line":544,"column":16},"end":{"line":546,"column":17}}],"line":544},"86":{"loc":{"start":{"line":544,"column":20},"end":{"line":544,"column":75}},"type":"binary-expr","locations":[{"start":{"line":544,"column":20},"end":{"line":544,"column":30}},{"start":{"line":544,"column":34},"end":{"line":544,"column":75}}],"line":544},"87":{"loc":{"start":{"line":549,"column":42},"end":{"line":549,"column":107}},"type":"cond-expr","locations":[{"start":{"line":549,"column":91},"end":{"line":549,"column":97}},{"start":{"line":549,"column":100},"end":{"line":549,"column":107}}],"line":549},"88":{"loc":{"start":{"line":549,"column":42},"end":{"line":549,"column":88}},"type":"binary-expr","locations":[{"start":{"line":549,"column":42},"end":{"line":549,"column":71}},{"start":{"line":549,"column":75},"end":{"line":549,"column":88}}],"line":549},"89":{"loc":{"start":{"line":552,"column":16},"end":{"line":554,"column":17}},"type":"if","locations":[{"start":{"line":552,"column":16},"end":{"line":554,"column":17}},{"start":{"line":552,"column":16},"end":{"line":554,"column":17}}],"line":552},"90":{"loc":{"start":{"line":574,"column":16},"end":{"line":576,"column":17}},"type":"if","locations":[{"start":{"line":574,"column":16},"end":{"line":576,"column":17}},{"start":{"line":574,"column":16},"end":{"line":576,"column":17}}],"line":574}},"s":{"0":1,"1":102,"2":0,"3":79,"4":102,"5":102,"6":0,"7":0,"8":0,"9":0,"10":181,"11":79,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":18,"25":12,"26":1,"27":1,"28":34,"29":41,"30":7,"31":7,"32":7,"33":7,"34":7,"35":7,"36":7,"37":1,"38":6,"39":1,"40":1,"41":5,"42":5,"43":2,"44":2,"45":2,"46":2,"47":2,"48":1,"49":1,"50":4,"51":4,"52":4,"53":4,"54":4,"55":10,"56":10,"57":10,"58":10,"59":10,"60":10,"61":10,"62":10,"63":10,"64":4,"65":4,"66":1,"67":3,"68":1,"69":2,"70":2,"71":10,"72":2,"73":14,"74":14,"75":1,"76":13,"77":1,"78":12,"79":1,"80":11,"81":1,"82":10,"83":10,"84":10,"85":10,"86":10,"87":10,"88":10,"89":10,"90":3,"91":3,"92":3,"93":3,"94":3,"95":1,"96":2,"97":1,"98":1,"99":1,"100":1,"101":6,"102":6,"103":6,"104":6,"105":1,"106":5,"107":1,"108":4,"109":1,"110":3,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":2,"122":2,"123":2,"124":2,"125":2,"126":2,"127":1,"128":1,"129":1,"130":1,"131":3,"132":5,"133":5,"134":5,"135":5,"136":1,"137":4,"138":1,"139":3,"140":1,"141":2,"142":2,"143":2,"144":2,"145":2,"146":2,"147":1,"148":1,"149":1,"150":1,"151":2,"152":5,"153":5,"154":5,"155":5,"156":1,"157":4,"158":4,"159":1,"160":3,"161":3,"162":1,"163":2,"164":2,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":8,"172":8,"173":8,"174":8,"175":3,"176":5,"177":8,"178":8,"179":7,"180":7,"181":1,"182":4,"183":4,"184":4,"185":4,"186":1,"187":3,"188":3,"189":1,"190":2,"191":2,"192":6,"193":2,"194":2,"195":1,"196":2,"197":8,"198":8,"199":8,"200":8,"201":8,"202":1,"203":7,"204":7,"205":10,"206":7,"207":1},"f":{"0":79,"1":102,"2":0,"3":79,"4":102,"5":0,"6":181,"7":1,"8":1,"9":18,"10":12,"11":1,"12":1,"13":34,"14":41,"15":7,"16":7,"17":7,"18":7,"19":7,"20":2,"21":2,"22":2,"23":2,"24":4,"25":4,"26":4,"27":4,"28":10,"29":10,"30":10,"31":10,"32":10,"33":14,"34":14,"35":10,"36":10,"37":10,"38":3,"39":3,"40":3,"41":3,"42":6,"43":6,"44":6,"45":6,"46":1,"47":1,"48":2,"49":1,"50":5,"51":5,"52":5,"53":5,"54":2,"55":1,"56":5,"57":5,"58":5,"59":5,"60":8,"61":8,"62":8,"63":8,"64":4,"65":4,"66":4,"67":4,"68":8,"69":8,"70":8,"71":8},"b":{"0":[1,1,1],"1":[102,0],"2":[79,79],"3":[79,102],"4":[79,79],"5":[1,1,1],"6":[0,1],"7":[1,1],"8":[1,6],"9":[1,5],"10":[1,1],"11":[0,10],"12":[10,10],"13":[1,3],"14":[4,3],"15":[1,2],"16":[1,13],"17":[1,12],"18":[1,11],"19":[1,10],"20":[1,2],"21":[1,1],"22":[0,1],"23":[1,1],"24":[0,1],"25":[1,1],"26":[5],"27":[1,5],"28":[6,5],"29":[0,6],"30":[6,6],"31":[3,2],"32":[5,5],"33":[1,4],"34":[5,4],"35":[0,5],"36":[5,5],"37":[2,2],"38":[4,4],"39":[1,3],"40":[4,3],"41":[0,4],"42":[4,4],"43":[1,2],"44":[3,3],"45":[1,2],"46":[1,0],"47":[1,0],"48":[2,0],"49":[1,1],"50":[1,4],"51":[5,4],"52":[0,5],"53":[5,5],"54":[3,1],"55":[4,4],"56":[1,3],"57":[4,3],"58":[0,4],"59":[4,4],"60":[2,1],"61":[3,3],"62":[1,2],"63":[3,2],"64":[0,3],"65":[3,3],"66":[1,1],"67":[2,2],"68":[2,0],"69":[1,1],"70":[1,4],"71":[1,3],"72":[4,1],"73":[0,3],"74":[3,3],"75":[1,2],"76":[0,2],"77":[2,2],"78":[1,1],"79":[3],"80":[3,5],"81":[7,1],"82":[8,3],"83":[1,3],"84":[4,2],"85":[1,2],"86":[3,2],"87":[0,6],"88":[6,6],"89":[1,1],"90":[1,7]},"inputSourceMap":{"version":3,"file":"C:/Users/Steph/OneDrive/Documents/Programming-stuff/GitHub/GridFS-file-tree-manager/src/index.ts","sources":["C:/Users/Steph/OneDrive/Documents/Programming-stuff/GitHub/GridFS-file-tree-manager/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { MongoClient, GridFSBucket,  Db, ObjectId, InsertOneResult, GridFSBucketReadStream, GridFSFile} from \"mongodb\"\r\nimport {Readable} from \"stream\"\r\nimport JSZip, { OutputType } from \"jszip\"\r\n\r\n/**\r\n * Shape of the object to be provided as an argument for the `options` parameter\r\n * of the `uploadFile` method on the MongoFileTree class.\r\n */\r\ninterface FileOptions{\r\n    /** Name of the file being uploaded  */\r\n    name: string,\r\n    /** Size of the file chunks in GridFS */\r\n    chunkSize: number,\r\n    /** Custom metadata properties to add to the file. Any property can be added besides 'path', 'parentDirectory', and 'isLatest' can be added. Is optional.  */\r\n    customMetadata?:MetadataOptions\r\n}\r\n\r\n/**\r\n * Object type representing custom metadata that the user can add to folders and files.\r\n * Can have any property except 'path', 'parentDirectory', and 'isLatest'.\r\n * This prevents users from improperly modifying these properties using class methods, as they\r\n * are critical to the basic functioning of the file tree.\r\n */\r\ntype MetadataOptions = Omit<object, \"path\" | \"parentDirectory\"| \"isLatest\">\r\n\r\n/** Stores a file tree in MongoDB using GridFS.\r\n * Files will be stored in a GridFS Bucket, and the documents in the `files` collection of the\r\n * bucket will have the following shape:\r\n * ```\r\n * {\r\n * \"_id\" : <ObjectId>,\r\n * \"length\" : <num>,\r\n * \"chunkSize\" : <num>,\r\n * \"uploadDate\" : <timestamp>,\r\n * \"filename\" : <string>,\r\n * \"metadata\" : {\r\n *      \"parentDirectory\":<string>, //Absolute path of the folder where the file is located\r\n *      \"path\":<string>, //Absolute path of the file\r\n *      \"isLatest\":<boolean>, //Is this the latest version of the file or not\r\n *      ...\r\n *  },\r\n * }\r\n * ```\r\n * The file tree can store multiple versions of a file.\r\n * The name of the file cannot have the following characters: /, $, %, ?, @, \", ', !, $, >, <, *, &, {,}, #, =,`, |, :, +, and whitespace characters.\r\n * An error will be raised if the user attempts to upload a file with those characters in its name or change a file's name\r\n * to a name that has those characters. The same is true for folder names. The folders of the file tree are stored as\r\n * documents in a separate collection from the bucket and possess the following shape in MongoDB:\r\n * ```\r\n *\r\n * {\r\n * \"_id\": <ObjectId>,\r\n * \"name\": <string>,\r\n * \"path\": <string>, //Absolute path of the folder\r\n * \"parentDirectory\":<string>, //Absolute path of the folder's parent folder.\r\n * \"customMetadata\": <object> //customMetadata can have any property specified by the user besides \"isLatest\", \"path\", or \"parentDirectory\"\r\n * }\r\n *\r\n * ```\r\n * The collection that stores folders is treated as the \"root directory\" of the file tree, with the\r\n * root directory's absolute path being the same as the name of the collection. A\r\n * `FileTree` object will also have a \"current working directory\",\r\n * with the absolute path to it being stored in the `currentWorkingDirectory` property.\r\n * The `currentWorkingDirectory` property will be the root directory when initialized.\r\n * The methods on this class to upload files and create folders automatically puts them under the\r\n * current working directory.\r\n * Note: this class automatically connects to MongoDB for all methods.\r\n */\r\nclass MongoFileTree{\r\n\r\n    private _currentWorkingDirectory: string\r\n    private _bucket: GridFSBucket\r\n    private _db:Db\r\n    private _folderCollectionName: string\r\n    private _client:MongoClient\r\n    private _bucketName: string\r\n\r\n    /**\r\n     * @constructor\r\n     * Connect to a MongoDB database that has a file tree. If any part of the file tree (database, folder storage collection, GridFS Bucket)\r\n     * does not already exist, it is created\r\n     * @param {string} mongoConnectionUrl - Connection URL to a MongoDB server\r\n     * @param {string} dbName - Name of a MongoDB database\r\n     * @param {string} bucketName - Name of the GridFS bucket that will store the files of the file tree\r\n     * @param {string} folderCollectionName - Name of the collection in the Mongo database specified by dbName\r\n     * that will be used for folder storage, store documents representing folders in the file tree\r\n     */\r\n    constructor(mongoConnectionUrl: string, dbName: string, bucketName: string, folderCollectionName: string){\r\n        this._client = new MongoClient(mongoConnectionUrl)\r\n\r\n        this._currentWorkingDirectory = folderCollectionName\r\n\r\n        this._bucket  = new GridFSBucket(this._client.db(dbName), {bucketName})\r\n\r\n        this._db= this._client.db(dbName)\r\n\r\n        this._folderCollectionName = folderCollectionName\r\n\r\n        this._bucketName = bucketName\r\n    }\r\n    /**\r\n     * Mongo database storing the file tree.\r\n     */\r\n    public get db(){\r\n        return this._db\r\n    }\r\n    /**\r\n     * GridFS bucket that stores the files of the file tree.\r\n     */\r\n    public get bucket(){\r\n        return this._bucket\r\n    }\r\n    /**\r\n     * Name of the GridFS bucket that stores the files of the file tree.\r\n     */\r\n    public get bucketName(){\r\n        return this._bucketName\r\n    }\r\n    /**\r\n     * Name of the collection in the Mongo database specified by dbName\r\n     * that will be used for folder storage, storing documents representing folders in the file tree.\r\n     */\r\n    public get folderCollectionName(){\r\n        return this._folderCollectionName\r\n    }\r\n    /**\r\n     * Absolute path of the current working directory of the file tree.\r\n     * This directory is where the files uploaded by the uploadFile method\r\n     * and the folders created by the createFolder method will be located.\r\n     */\r\n    public get currentWorkingDirectory(){\r\n        return this._currentWorkingDirectory\r\n    }\r\n    /**\r\n     * MongoDB client being used for the file tree.\r\n     */\r\n    public get client(){\r\n        return this._client\r\n    }\r\n\r\n    /**\r\n     * @description Creates a document representing a folder in the collection specified by `folderCollectionName`.\r\n     * Its parent directory will be the current value of the `currentWorkingDirectory` property.\r\n     * Will return an error if a folder with the name provided to the method already\r\n     * exists in the current working directory of the file tree.\r\n     * @param {string} folderName Name of the folder\r\n     * @param {object} customMetadata Custom metadata properties to add to the folder.\r\n     * Any property can be added except `path`, `isLatest`, or `parentDirectory`.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * //Creates new folder with path sample-folder/subfolder-sample\r\n     * let result = await fileTree.createFolder(\"subfolder-sample\") //MongoDB InsertOneResult with the id of the document representing the folder\r\n     */\r\n\r\n    createFolder(folderName: string, customMetadata?: MetadataOptions){\r\n        return new Promise<InsertOneResult>(async (resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                const path = this.currentWorkingDirectory+`/${folderName}`\r\n\r\n                const doesFolderExist = Boolean(await this._db.collection(this._folderCollectionName).findOne({\"path\":path}))\r\n                if(doesFolderExist){\r\n                    return reject(new Error(`Folder with name ${folderName} already exists in the current directory`))\r\n                }\r\n                if(folderName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                    // @ts-ignore\r\n                    const errSymbol = folderName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]\r\n                    return reject(new Error(`Character \"${errSymbol}\" cannot be used as part of a folder name`))\r\n                }\r\n\r\n                const result =  await this._db.collection(this._folderCollectionName).insertOne({name:folderName, path, parentDirectory:this.currentWorkingDirectory, customMetadata:{...customMetadata}})\r\n                resolve(result)\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @description Returns a promise which resolves to a `GridFSBucketReadStream` of a file stored in the\r\n     * GridFS Bucket specified by the `bucketName` property.\r\n     * @param {string} filePath Absolute path of the file to get a readable stream of\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * let stream = await fileTree.getFileReadStream(\"sample-folder/sample.txt\")\r\n     */\r\n\r\n    getFileReadStream(filePath: string){\r\n        return new Promise<GridFSBucketReadStream>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                const file = (await this._bucket.find({\"metadata.path\":filePath, \"metadata.isLatest\":true}).toArray())[0]\r\n\r\n                if(!file){\r\n                    return reject(new Error(`File with path ${filePath} does not exist`))\r\n                }\r\n                resolve(this._bucket.openDownloadStream(file._id))\r\n            })\r\n        })\r\n\r\n    }\r\n    /**\r\n     * @description Lets the user download the folder specified in the `folderPath` parameter as a zip file. The form which the zip file is returned varies\r\n     * based on the argument provided for the returnType parameter.\r\n     * @param {string} folderPath String representing the absolute path of the folder\r\n     * @param {string} returnType String specifying the form in which the zip file of the target folder should be returned. Valid options are 'base64',\r\n     * 'nodebuffer' (NodeJS buffer), 'array' (array of bytes (numbers between 255 and 0)), 'uint8array','arraybuffer', 'blob', and 'binarystring'.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * //Returns an array of bytes (numbers between 255 and 0) representing the data of the zip file\r\n     * let zip = await fileTree.downloadFolder(\"sample-folder/subfolder-sample\", \"array\")\r\n     */\r\n    downloadFolder(folderPath: string, returnType: OutputType){\r\n        return new Promise<Buffer|Uint8Array|string|Blob|number[]|ArrayBuffer>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                const folderZip = new JSZip()\r\n\r\n                const downloadAsync = async (file: GridFSFile): Promise<void> =>{\r\n                    return new Promise<void>((resolveFileDownload)=>{\r\n                        const downloadStream = this._bucket.openDownloadStream(file._id)\r\n                        let data = ''\r\n                        downloadStream.on(\"data\",(chunk)=>{\r\n                            data+=chunk.toString(\"base64\")\r\n                        })\r\n                        downloadStream.on(\"end\",()=>{\r\n                            folderZip.file(file.metadata?.path.slice(folderPath.length+1), data, {createFolders:true, base64:true})\r\n                            resolveFileDownload()\r\n                        })\r\n                    })\r\n                }\r\n\r\n                const topFolder = await this._db.collection(this._folderCollectionName).findOne({\"path\":folderPath})\r\n\r\n                if(!topFolder && folderPath !== this._folderCollectionName){\r\n                    return reject(new Error(`Folder with path ${folderPath} does not exist`))\r\n                }\r\n\r\n                if(!['base64','nodebuffer', 'array', 'uint8array','arraybuffer', 'blob', 'binarystring'].includes(returnType)){\r\n                    return reject(new Error(`Invalid argument for parameter returnType. Argument must either be 'base64','nodebuffer', 'array', 'uint8array','arraybuffer', 'blob', or 'binarystring'.`))\r\n                }\r\n\r\n                const allFiles: GridFSFile[] = await this._bucket.find({\"metadata.isLatest\":true, \"metadata.parentDirectory\":new RegExp(\"^\"+folderPath)}).toArray()\r\n\r\n\r\n                for(const file of allFiles){\r\n                    await downloadAsync(file)\r\n                }\r\n                return resolve(await folderZip.generateAsync({type:returnType}))\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @description Upload a file to the GridFS Bucket file tree, with the parent directory of the file being\r\n     * the current working directory of the file tree.\r\n     * If a file with the name provided to the method from the `options` parameter already exists\r\n     * in the current working directory of the file tree,\r\n     * the uploaded file will be treated as the latest version of that file, with the\r\n     * `isLatest` metadata property of the uploaded file being true and the `isLatest` property of the\r\n     * previous file being set to false.\r\n     * @param {Readable} fileStream Valid readable stream\r\n     * @param {FileOptions} options Options for the file. Mandatory properties are `name` and `chunkSize`\r\n     * (the size of the chunks of the file in GridFS in bytes).\r\n     * The `customMetadata` property is optional.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * // id of the file in file tree GridFS bucket\r\n     * let id = await fileTree.uploadFile(fs.createReadStream(\"sample.txt\"), {name:\"sample.txt\", chunkSize:1048576, customMetadata:{favourite:true}})\r\n     */\r\n    uploadFile(fileStream: Readable, options: FileOptions){\r\n        return new Promise<ObjectId>((resolve, reject)=>{\r\n            if (!(fileStream instanceof Readable)){\r\n                return reject(new Error(\"Argument for parameter fileStream is not a valid readable stream\"))\r\n            }\r\n\r\n            if(!options.name){\r\n                return reject(new Error(\"Missing 'name' property for 'options' parameter.\"))\r\n            }\r\n\r\n            if(!options.chunkSize){\r\n                return reject(new Error(\"Missing 'chunkSize' property for 'options' parameter.\"))\r\n            }\r\n\r\n            if(options.name.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                // @ts-ignore\r\n                return reject(new Error(`Character \"${options.name.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]}\" cannot be used as part of a file name`))\r\n            }\r\n\r\n            const path = this.currentWorkingDirectory+`/${options.name}`\r\n\r\n            this._client.connect(()=>{\r\n                this._db.collection(this._bucketName+\".files\").findOneAndUpdate({\"metadata.path\":path, \"metadata.isLatest\":true},{$set:{\"metadata.isLatest\":false}})\r\n                const uploadStream = this._bucket.openUploadStream(options.name, {\r\n\r\n                    chunkSizeBytes:options.chunkSize,\r\n\r\n                    metadata:{\r\n                        parentDirectory:this.currentWorkingDirectory,\r\n                        path,\r\n                        isLatest:true,\r\n                        ...options.customMetadata\r\n                    }\r\n\r\n                })\r\n\r\n                fileStream.pipe(uploadStream)\r\n                uploadStream.on(\"finish\",async ()=>{\r\n                    resolve(uploadStream.id)\r\n                })\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @description Change the name of a file in the file tree. This also changes its `path` metadata property accordingly.\r\n     * @param {string} newName New name for the file\r\n     * @param {string} filePath Absolute path of the file that you want to change the name of\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFileName(\"new-file-name\", \"sample-folder/old-file-name.txt\") //File now has path sample-folder/new-file-name.txt\r\n     */\r\n     changeFileName(newName:string, filePath:string){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                const allFileVersions = this._bucket.find({\"metadata.path\":filePath})\r\n\r\n                if(!(await allFileVersions.hasNext())){\r\n                    return reject(new Error(`File with path ${filePath} does not exist`))\r\n                }\r\n\r\n                if(newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                    // @ts-ignore\r\n                    return reject(new Error(`Character \"${newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]}\" cannot be used as part of a file name`))\r\n                }\r\n\r\n                const parentDirectory = (await allFileVersions.next())?.metadata?.parentDirectory\r\n                await this._db.collection(this.bucketName+\".files\").updateMany({\"metadata.path\":filePath},{$set:{\"metadata.path\":parentDirectory+`/${newName}`, \"filename\":newName}})\r\n\r\n                resolve()\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Update the metadata of a file in the file tree, allowing users to add, change, or delete metadata properties from files.\r\n     * Raises an error if the user tries to change or delete the 'path', 'parentDirectory', or 'isLatest' metadata properties from a file.\r\n     * @param {string} filePath Absolute path of the file that you want to change the metadata of\r\n     * @param {MetadataOptions} newMetadata Metadata properties to add or change the value of. Can have any property except the ones listed above.\r\n     * @param {Array<string>} deleteFields Metadata properties to delete. Can include any property except the ones listed above.\r\n     * @param {boolean} changeForAllVersions If false, only changes metadata properties for latest version of file.\r\n     * If true, changes metadata properties for all versions of the file. Defaults to false.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFileMetadata(\"sample-folder/sample.txt\", {favourite:true}, [\"sample-property\"], true)\r\n     */\r\n     changeFileMetadata(filePath: string, newMetadata?:MetadataOptions, deleteFields?:string[], changeForAllVersions: boolean= false){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                // @ts-ignore\r\n                if(newMetadata?.path || deleteFields?.includes('path')){\r\n                    return reject(new Error(\"Cannot change or delete 'path' metadata property using this method\" ))\r\n                }\r\n                // @ts-ignore\r\n                if(newMetadata?.parentDirectory|| deleteFields?.includes('parentDirectory')){\r\n                    return reject(new Error(\"Cannot change or delete 'parentDirectory' metadata property using this method\" ))\r\n                }\r\n                // @ts-ignore\r\n                if(newMetadata?.isLatest || deleteFields?.includes('isLatest')){\r\n                    return reject(new Error(\"Cannot delete or change the type of 'isLatest' metadata property using this method\" ))\r\n                }\r\n                if(changeForAllVersions){\r\n                    if(newMetadata){\r\n                        const fields: any = {}\r\n                        Object.keys(newMetadata).forEach((field: string)=>{\r\n                            // @ts-ignore\r\n                            fields[\"metadata.\"+field] = newMetadata[field]\r\n                        })\r\n                        await this._db.collection(this._bucketName+\".files\").updateMany({\"metadata.path\":filePath},{$set:fields})\r\n                    }\r\n                    if(deleteFields){\r\n\r\n                        const fields: any = {}\r\n                        deleteFields.forEach((field: string)=>{\r\n                            // @ts-ignore\r\n                            fields[\"metadata.\"+field] = \"\"\r\n                        })\r\n                        await this._db.collection(this._bucketName+\".files\").updateMany({\"metadata.path\":filePath},{$unset:fields})\r\n                    }\r\n                }\r\n                else{\r\n                    if(newMetadata){\r\n                        const fields: any = {}\r\n                        Object.keys(newMetadata).forEach((field: string)=>{\r\n                            // @ts-ignore\r\n                            fields[\"metadata.\"+field] = newMetadata[field]\r\n                        })\r\n                        await this._db.collection(this._bucketName+\".files\").findOneAndUpdate({\"metadata.isLatest\":true,\"metadata.path\":filePath},{$set:fields})\r\n                    }\r\n                    if(deleteFields){\r\n\r\n                        const fields: any = {}\r\n                        deleteFields.forEach((field: string)=>{\r\n                            // @ts-ignore\r\n                            fields[\"metadata.\"+field] = \"\"\r\n                        })\r\n                        await this._db.collection(this._bucketName+\".files\").findOneAndUpdate({\"metadata.isLatest\":true,\"metadata.path\":filePath},{$unset:fields})\r\n                    }\r\n                }\r\n                resolve()\r\n            })\r\n\r\n        })\r\n    }\r\n    /**\r\n     * @description Update the metadata of a folder in the file tree, allowing users to add, change, or delete metadata properties from folders.\r\n     * Raises an error if the user tries to change or delete the 'path' and 'parentDirectory' properties from a folder.\r\n     * @param {string} folderPath Absolute path of the folder that you want to change the name of\r\n     * @param {MetadataOptions} newMetadata Metadata properties to add or change the value of. Can have any property except the ones listed above.\r\n     * @param {Array<string>} deleteFields Metadata properties to delete. Can have any property except the ones listed above.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFolderMetadata(\"sample-folder/subfolder\", {favorite:true}, [\"sample-property\"])\r\n     */\r\n    changeFolderMetadata(folderPath: string, newMetadata?:MetadataOptions, deleteFields?:string[]){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                // @ts-ignore\r\n                if(newMetadata?.path || deleteFields?.includes('path')){\r\n                    return reject(new Error(\"Cannot change or delete 'path' metadata property using this method\" ))\r\n                }\r\n                // @ts-ignore\r\n                if(newMetadata?.parentDirectory|| deleteFields?.includes('parentDirectory')){\r\n                    return reject(new Error(\"Cannot change or delete 'parentDirectory' metadata property using this method\" ))\r\n                }\r\n                // @ts-ignore\r\n                if(newMetadata?.isLatest || deleteFields?.includes('isLatest')){\r\n                    return reject(new Error(\"Cannot add or delete 'isLatest' metadata property for a folder\" ))\r\n                }\r\n\r\n                if(newMetadata){\r\n                    const fields: any = {}\r\n                    Object.keys(newMetadata).forEach((field: string)=>{\r\n                        // @ts-ignore\r\n                        fields[\"customMetadata.\"+field] = newMetadata[field]\r\n                    })\r\n                    await this._db.collection(this._folderCollectionName).findOneAndUpdate({\"path\":folderPath},{$set:fields})\r\n                }\r\n\r\n                if(deleteFields){\r\n                    const fields: any = {}\r\n                    deleteFields.forEach((field: string)=>{\r\n                        fields[\"customMetadata.\"+field] = \"\"\r\n                    })\r\n                    await this._db.collection(this._folderCollectionName).findOneAndUpdate({\"path\":folderPath},{$unset:fields})\r\n                }\r\n                resolve()\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Change the name of a folder in the file tree. This also changes its `path` metadata property accordingly,\r\n     * and the `path` and `parentDirectory` metadata property of all subfolders and files in the folder. Raises an error\r\n     * if the specified folder does not exist.\r\n     * @param {string} newName New name for the file\r\n     * @param {string} folderPath Absolute path of the folder that you want to change the name of\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFolderName(\"new-folder-name\", \"sample-folder/sample-folder-2\")\r\n     */\r\n    changeFolderName(newName:string, folderPath:string){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n\r\n                if(folderPath === this._folderCollectionName){\r\n                    return reject(new Error(`Cannot rename root directory of the file tree`))\r\n                }\r\n\r\n                const topFolder = await this._db.collection(this._folderCollectionName).findOne({\"path\":folderPath})\r\n\r\n                let newPath: string\r\n\r\n                if(!topFolder && folderPath !== this._folderCollectionName){\r\n                    return reject(new Error(`Folder with path ${folderPath} does not exist`))\r\n                }\r\n\r\n                const doesFolderExist = Boolean(await this._db.collection(this._folderCollectionName).findOne({\"path\":topFolder?.parentDirectory+`/${newName}`}))\r\n\r\n                if(doesFolderExist){\r\n                    return reject(new Error(`Folder with name ${newName} already exists in the specified directory`))\r\n                }\r\n\r\n                newPath = topFolder?.parentDirectory+`/${newName}`\r\n\r\n                if(newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                    // @ts-ignore\r\n                    const errSymbol = newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]\r\n                    return reject(new Error(`Character \"${errSymbol}\" cannot be used as part of a folder name`))\r\n                }\r\n\r\n                await this._db.collection(this._folderCollectionName).updateOne({\"path\":folderPath},{$set:{\"path\":newPath, \"name\":newName}})\r\n                await this._db.collection(this._folderCollectionName).updateMany({\"parentDirectory\":new RegExp(\"^\"+folderPath)},\r\n                [{$set:{\"path\":\r\n                {$replaceOne:{\r\n                    input:\"$path\",\r\n                    find:folderPath,\r\n                    replacement:newPath}},\r\n                \"parentDirectory\":\r\n                {$replaceOne:{\r\n                    input:\"$parentDirectory\",\r\n                    find:folderPath,\r\n                    replacement:newPath}},\r\n                \"name\":newName\r\n                }}])\r\n\r\n                await this._db.collection(this._bucketName+'.files').updateMany({\"metadata.parentDirectory\":new RegExp(\"^\"+folderPath)},\r\n                [{$set:{\"metadata.path\":\r\n                {$replaceOne:{\r\n                    input:\"$metadata.path\",\r\n                    find:folderPath,\r\n                    replacement:newPath}},\r\n                \"metadata.parentDirectory\":\r\n                {$replaceOne:{\r\n                    input:\"$metadata.parentDirectory\",\r\n                    find:folderPath,\r\n                    replacement:newPath}}\r\n                }}])\r\n\r\n                resolve()\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Changes the current working directory of the file tree to the absolute path of the directory\r\n     * specified by the `path` parameter, which is the folder where files uploaded by the `uploadFile` method and where new folders\r\n     * created by the `createFolder` method will be located. Will raise an error if a directory with\r\n     * the specified path does not exist.\r\n     * @param {string} path If parameter `isRelative` is false, or not provided, `path` should be a\r\n     * string representing the absolute path of a directory that exists in the collection specified by the\r\n     * `folderCollectionName` property. If parameter `isRelative` is true, `path` is assumed to be relative\r\n     * to the current working directory. The 'root directory' will have the same name as the `folderCollectionName`\r\n     * property.\r\n     * @param {boolean} isRelative If true, parameter `path` must be relative to the current working directory. If false, which is the default value,\r\n     * parameter `path` must be the absolute path of a file.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * //Absolute path, current working directory is now \"sample-folder/subfolder-sample\"\r\n     * await fileTree.changeDirectory(\"sample-folder/subfolder-sample\")\r\n     * //Relative path; absolute path of current working directory is now \"sample-folder/subfolder-sample/subfolder-sample-2\"\r\n     * await fileTree.changeDirectory(\"subfolder-sample-2\", true)\r\n     */\r\n    changeDirectory(path: string, isRelative: boolean = false){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                let absolutePath\r\n                if(!isRelative){\r\n                    absolutePath = path\r\n                }\r\n                else{\r\n                    absolutePath = this._currentWorkingDirectory+\"/\"+path\r\n                }\r\n                const folder = await this._db.collection(this._folderCollectionName).findOne({\"path\":absolutePath})\r\n                if(folder || absolutePath === this._folderCollectionName){\r\n                    this._currentWorkingDirectory = absolutePath\r\n                    resolve()\r\n                }\r\n                else{\r\n                    return reject(new Error(`Folder with path ${absolutePath} does not exist`))\r\n                }\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @description Deletes a folder from the file tree, including all versions of the files in it and its subfolders.\r\n     * If current working directory is about to be deleted, and it is not the root directory, raises en error.\r\n     * @param {string} folderPath Absolute path of a folder that exists in the collection\r\n     * specified by the `folderCollectionName` property, or the name of the folder storage collection (`folderCollectionName`)\r\n     * If `folderPath` is the same as `folderCollectionName`, the collection is not deleted, but all documents in it and\r\n     * files in the associated GridFS bucket of the file tree will still be deleted.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.deleteFolder(\"sample-folder/subfolder-sample\")\r\n     */\r\n    deleteFolder(folderPath: string){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async()=>{\r\n\r\n                if(this._currentWorkingDirectory.match(folderPath) && folderPath !== this._folderCollectionName ){\r\n                    return reject(new Error(`Cannot delete current working directory (${this._currentWorkingDirectory})`))\r\n                }\r\n\r\n                const topFolder = await this._db.collection(this._folderCollectionName).findOne({\"path\":folderPath})\r\n\r\n                if(!topFolder && folderPath !== this._folderCollectionName){\r\n                    return reject(new Error(`Folder with path ${folderPath} does not exist`))\r\n                }\r\n\r\n                const allFiles: GridFSFile[] = await this._bucket.find({\"metadata.isLatest\":true, \"metadata.parentDirectory\":new RegExp(\"^\"+folderPath)}).toArray()\r\n\r\n\r\n                for(const file of allFiles){\r\n                    await this.deleteFile(file.metadata?.path)\r\n                }\r\n                await this._db.collection(this._folderCollectionName).deleteMany({\"parentDirectory\":new RegExp(\"^\"+folderPath)})\r\n\r\n                if(folderPath !== this._folderCollectionName){\r\n                    await this._db.collection(this._folderCollectionName).deleteOne({\"path\":folderPath})\r\n                }\r\n\r\n                resolve()\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @description Deletes all the versions of a file from the GridFS bucket of the file tree.\r\n     * @param {string} filePath Absolute path to a file that exists in the bucket specified by the `bucket`\r\n     * property on the `FileTree` class\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.deleteFile(\"sample-folder/sample.txt\")\r\n     */\r\n    deleteFile(filePath: string){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            this._client.connect(async ()=>{\r\n                const allFileVersions = this._bucket.find({\"metadata.path\":filePath})\r\n                if(!(await allFileVersions.hasNext())){\r\n                    return reject(new Error(`File with path ${filePath} does not exist`))\r\n                }\r\n\r\n                const allFileVersionsArr = await allFileVersions.toArray()\r\n                for(const file of allFileVersionsArr){\r\n                    await this._bucket.delete(file._id)\r\n                }\r\n                resolve()\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default MongoFileTree\r\nexport {FileOptions, MetadataOptions}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"41ffa55da26f4ef5d0edeb3ebb46a65c116b5d79","contentHash":"1e04c50138c3998bf287c2af7e394623e4b6f8357b03ca86689fef5c726f7598"}}