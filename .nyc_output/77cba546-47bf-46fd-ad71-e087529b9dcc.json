{"C:\\Users\\Steph\\OneDrive\\Documents\\Programming-stuff\\GitHub\\GridFS-file-tree-manager\\src\\index.ts":{"path":"C:\\Users\\Steph\\OneDrive\\Documents\\Programming-stuff\\GitHub\\GridFS-file-tree-manager\\src\\index.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":18},"end":{"line":15,"column":36}},"16":{"start":{"line":16,"column":17},"end":{"line":16,"column":34}},"17":{"start":{"line":17,"column":16},"end":{"line":17,"column":49}},"18":{"start":{"line":73,"column":8},"end":{"line":73,"column":69}},"19":{"start":{"line":74,"column":8},"end":{"line":74,"column":61}},"20":{"start":{"line":75,"column":8},"end":{"line":75,"column":91}},"21":{"start":{"line":76,"column":8},"end":{"line":76,"column":43}},"22":{"start":{"line":77,"column":8},"end":{"line":77,"column":58}},"23":{"start":{"line":78,"column":8},"end":{"line":78,"column":38}},"24":{"start":{"line":84,"column":8},"end":{"line":84,"column":24}},"25":{"start":{"line":90,"column":8},"end":{"line":90,"column":28}},"26":{"start":{"line":96,"column":8},"end":{"line":96,"column":32}},"27":{"start":{"line":103,"column":8},"end":{"line":103,"column":42}},"28":{"start":{"line":111,"column":8},"end":{"line":111,"column":45}},"29":{"start":{"line":117,"column":8},"end":{"line":117,"column":28}},"30":{"start":{"line":136,"column":8},"end":{"line":150,"column":12}},"31":{"start":{"line":136,"column":48},"end":{"line":150,"column":10}},"32":{"start":{"line":137,"column":12},"end":{"line":137,"column":41}},"33":{"start":{"line":138,"column":25},"end":{"line":138,"column":72}},"34":{"start":{"line":139,"column":36},"end":{"line":139,"column":124}},"35":{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},"36":{"start":{"line":141,"column":16},"end":{"line":141,"column":115}},"37":{"start":{"line":143,"column":12},"end":{"line":147,"column":13}},"38":{"start":{"line":145,"column":34},"end":{"line":145,"column":85}},"39":{"start":{"line":146,"column":16},"end":{"line":146,"column":109}},"40":{"start":{"line":148,"column":27},"end":{"line":148,"column":216}},"41":{"start":{"line":149,"column":12},"end":{"line":149,"column":28}},"42":{"start":{"line":164,"column":8},"end":{"line":171,"column":12}},"43":{"start":{"line":164,"column":48},"end":{"line":171,"column":10}},"44":{"start":{"line":165,"column":12},"end":{"line":165,"column":41}},"45":{"start":{"line":166,"column":25},"end":{"line":166,"column":121}},"46":{"start":{"line":167,"column":12},"end":{"line":169,"column":13}},"47":{"start":{"line":168,"column":16},"end":{"line":168,"column":86}},"48":{"start":{"line":170,"column":12},"end":{"line":170,"column":63}},"49":{"start":{"line":188,"column":8},"end":{"line":217,"column":12}},"50":{"start":{"line":188,"column":48},"end":{"line":217,"column":10}},"51":{"start":{"line":189,"column":12},"end":{"line":189,"column":41}},"52":{"start":{"line":190,"column":30},"end":{"line":190,"column":51}},"53":{"start":{"line":191,"column":34},"end":{"line":204,"column":14}},"54":{"start":{"line":191,"column":44},"end":{"line":204,"column":14}},"55":{"start":{"line":192,"column":16},"end":{"line":203,"column":19}},"56":{"start":{"line":193,"column":43},"end":{"line":193,"column":84}},"57":{"start":{"line":194,"column":31},"end":{"line":194,"column":33}},"58":{"start":{"line":195,"column":20},"end":{"line":197,"column":23}},"59":{"start":{"line":196,"column":24},"end":{"line":196,"column":57}},"60":{"start":{"line":198,"column":20},"end":{"line":202,"column":23}},"61":{"start":{"line":200,"column":24},"end":{"line":200,"column":180}},"62":{"start":{"line":201,"column":24},"end":{"line":201,"column":46}},"63":{"start":{"line":205,"column":30},"end":{"line":205,"column":115}},"64":{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},"65":{"start":{"line":207,"column":16},"end":{"line":207,"column":90}},"66":{"start":{"line":209,"column":12},"end":{"line":211,"column":13}},"67":{"start":{"line":210,"column":16},"end":{"line":210,"column":198}},"68":{"start":{"line":212,"column":29},"end":{"line":212,"column":151}},"69":{"start":{"line":213,"column":12},"end":{"line":215,"column":13}},"70":{"start":{"line":214,"column":16},"end":{"line":214,"column":42}},"71":{"start":{"line":216,"column":12},"end":{"line":216,"column":80}},"72":{"start":{"line":240,"column":8},"end":{"line":265,"column":12}},"73":{"start":{"line":240,"column":48},"end":{"line":265,"column":10}},"74":{"start":{"line":241,"column":12},"end":{"line":243,"column":13}},"75":{"start":{"line":242,"column":16},"end":{"line":242,"column":109}},"76":{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},"77":{"start":{"line":245,"column":16},"end":{"line":245,"column":93}},"78":{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},"79":{"start":{"line":248,"column":16},"end":{"line":248,"column":98}},"80":{"start":{"line":250,"column":12},"end":{"line":253,"column":13}},"81":{"start":{"line":252,"column":16},"end":{"line":252,"column":151}},"82":{"start":{"line":254,"column":25},"end":{"line":254,"column":74}},"83":{"start":{"line":255,"column":12},"end":{"line":255,"column":41}},"84":{"start":{"line":256,"column":12},"end":{"line":256,"column":174}},"85":{"start":{"line":257,"column":33},"end":{"line":260,"column":14}},"86":{"start":{"line":261,"column":12},"end":{"line":261,"column":42}},"87":{"start":{"line":262,"column":12},"end":{"line":264,"column":16}},"88":{"start":{"line":262,"column":44},"end":{"line":264,"column":14}},"89":{"start":{"line":263,"column":16},"end":{"line":263,"column":41}},"90":{"start":{"line":279,"column":8},"end":{"line":293,"column":12}},"91":{"start":{"line":279,"column":48},"end":{"line":293,"column":10}},"92":{"start":{"line":281,"column":12},"end":{"line":281,"column":41}},"93":{"start":{"line":282,"column":36},"end":{"line":282,"column":84}},"94":{"start":{"line":283,"column":12},"end":{"line":285,"column":13}},"95":{"start":{"line":284,"column":16},"end":{"line":284,"column":86}},"96":{"start":{"line":286,"column":12},"end":{"line":289,"column":13}},"97":{"start":{"line":288,"column":16},"end":{"line":288,"column":146}},"98":{"start":{"line":290,"column":36},"end":{"line":290,"column":185}},"99":{"start":{"line":291,"column":12},"end":{"line":291,"column":193}},"100":{"start":{"line":292,"column":12},"end":{"line":292,"column":22}},"101":{"start":{"line":311,"column":8},"end":{"line":362,"column":12}},"102":{"start":{"line":311,"column":48},"end":{"line":362,"column":10}},"103":{"start":{"line":312,"column":12},"end":{"line":312,"column":41}},"104":{"start":{"line":314,"column":12},"end":{"line":316,"column":13}},"105":{"start":{"line":315,"column":16},"end":{"line":315,"column":111}},"106":{"start":{"line":318,"column":12},"end":{"line":320,"column":13}},"107":{"start":{"line":319,"column":16},"end":{"line":319,"column":122}},"108":{"start":{"line":322,"column":12},"end":{"line":324,"column":13}},"109":{"start":{"line":323,"column":16},"end":{"line":323,"column":127}},"110":{"start":{"line":325,"column":12},"end":{"line":360,"column":13}},"111":{"start":{"line":326,"column":16},"end":{"line":333,"column":17}},"112":{"start":{"line":327,"column":35},"end":{"line":327,"column":37}},"113":{"start":{"line":328,"column":20},"end":{"line":331,"column":23}},"114":{"start":{"line":330,"column":24},"end":{"line":330,"column":73}},"115":{"start":{"line":332,"column":20},"end":{"line":332,"column":135}},"116":{"start":{"line":334,"column":16},"end":{"line":341,"column":17}},"117":{"start":{"line":335,"column":35},"end":{"line":335,"column":37}},"118":{"start":{"line":336,"column":20},"end":{"line":339,"column":23}},"119":{"start":{"line":338,"column":24},"end":{"line":338,"column":57}},"120":{"start":{"line":340,"column":20},"end":{"line":340,"column":137}},"121":{"start":{"line":344,"column":16},"end":{"line":351,"column":17}},"122":{"start":{"line":345,"column":35},"end":{"line":345,"column":37}},"123":{"start":{"line":346,"column":20},"end":{"line":349,"column":23}},"124":{"start":{"line":348,"column":24},"end":{"line":348,"column":73}},"125":{"start":{"line":350,"column":20},"end":{"line":350,"column":168}},"126":{"start":{"line":352,"column":16},"end":{"line":359,"column":17}},"127":{"start":{"line":353,"column":35},"end":{"line":353,"column":37}},"128":{"start":{"line":354,"column":20},"end":{"line":357,"column":23}},"129":{"start":{"line":356,"column":24},"end":{"line":356,"column":57}},"130":{"start":{"line":358,"column":20},"end":{"line":358,"column":170}},"131":{"start":{"line":361,"column":12},"end":{"line":361,"column":22}},"132":{"start":{"line":378,"column":8},"end":{"line":408,"column":12}},"133":{"start":{"line":378,"column":48},"end":{"line":408,"column":10}},"134":{"start":{"line":379,"column":12},"end":{"line":379,"column":41}},"135":{"start":{"line":381,"column":12},"end":{"line":383,"column":13}},"136":{"start":{"line":382,"column":16},"end":{"line":382,"column":111}},"137":{"start":{"line":385,"column":12},"end":{"line":387,"column":13}},"138":{"start":{"line":386,"column":16},"end":{"line":386,"column":122}},"139":{"start":{"line":389,"column":12},"end":{"line":391,"column":13}},"140":{"start":{"line":390,"column":16},"end":{"line":390,"column":107}},"141":{"start":{"line":392,"column":12},"end":{"line":399,"column":13}},"142":{"start":{"line":393,"column":31},"end":{"line":393,"column":33}},"143":{"start":{"line":394,"column":16},"end":{"line":397,"column":19}},"144":{"start":{"line":396,"column":20},"end":{"line":396,"column":75}},"145":{"start":{"line":398,"column":16},"end":{"line":398,"column":129}},"146":{"start":{"line":400,"column":12},"end":{"line":406,"column":13}},"147":{"start":{"line":401,"column":31},"end":{"line":401,"column":33}},"148":{"start":{"line":402,"column":16},"end":{"line":404,"column":19}},"149":{"start":{"line":403,"column":20},"end":{"line":403,"column":59}},"150":{"start":{"line":405,"column":16},"end":{"line":405,"column":131}},"151":{"start":{"line":407,"column":12},"end":{"line":407,"column":22}},"152":{"start":{"line":424,"column":8},"end":{"line":459,"column":12}},"153":{"start":{"line":424,"column":48},"end":{"line":459,"column":10}},"154":{"start":{"line":425,"column":12},"end":{"line":425,"column":41}},"155":{"start":{"line":426,"column":12},"end":{"line":428,"column":13}},"156":{"start":{"line":427,"column":16},"end":{"line":427,"column":90}},"157":{"start":{"line":429,"column":30},"end":{"line":429,"column":115}},"158":{"start":{"line":431,"column":12},"end":{"line":433,"column":13}},"159":{"start":{"line":432,"column":16},"end":{"line":432,"column":90}},"160":{"start":{"line":434,"column":36},"end":{"line":434,"column":217}},"161":{"start":{"line":435,"column":12},"end":{"line":437,"column":13}},"162":{"start":{"line":436,"column":16},"end":{"line":436,"column":114}},"163":{"start":{"line":438,"column":12},"end":{"line":438,"column":120}},"164":{"start":{"line":439,"column":12},"end":{"line":443,"column":13}},"165":{"start":{"line":441,"column":34},"end":{"line":441,"column":82}},"166":{"start":{"line":442,"column":16},"end":{"line":442,"column":109}},"167":{"start":{"line":444,"column":12},"end":{"line":444,"column":148}},"168":{"start":{"line":445,"column":12},"end":{"line":445,"column":161}},"169":{"start":{"line":446,"column":12},"end":{"line":446,"column":33}},"170":{"start":{"line":447,"column":12},"end":{"line":457,"column":26}},"171":{"start":{"line":458,"column":12},"end":{"line":458,"column":22}},"172":{"start":{"line":484,"column":8},"end":{"line":501,"column":12}},"173":{"start":{"line":484,"column":48},"end":{"line":501,"column":10}},"174":{"start":{"line":485,"column":12},"end":{"line":485,"column":41}},"175":{"start":{"line":487,"column":12},"end":{"line":492,"column":13}},"176":{"start":{"line":488,"column":16},"end":{"line":488,"column":36}},"177":{"start":{"line":491,"column":16},"end":{"line":491,"column":74}},"178":{"start":{"line":493,"column":27},"end":{"line":493,"column":114}},"179":{"start":{"line":494,"column":12},"end":{"line":500,"column":13}},"180":{"start":{"line":495,"column":16},"end":{"line":495,"column":61}},"181":{"start":{"line":496,"column":16},"end":{"line":496,"column":26}},"182":{"start":{"line":499,"column":16},"end":{"line":499,"column":92}},"183":{"start":{"line":518,"column":8},"end":{"line":537,"column":12}},"184":{"start":{"line":518,"column":48},"end":{"line":537,"column":10}},"185":{"start":{"line":520,"column":12},"end":{"line":520,"column":41}},"186":{"start":{"line":521,"column":12},"end":{"line":523,"column":13}},"187":{"start":{"line":522,"column":16},"end":{"line":522,"column":119}},"188":{"start":{"line":524,"column":30},"end":{"line":524,"column":115}},"189":{"start":{"line":525,"column":12},"end":{"line":527,"column":13}},"190":{"start":{"line":526,"column":16},"end":{"line":526,"column":90}},"191":{"start":{"line":528,"column":29},"end":{"line":528,"column":151}},"192":{"start":{"line":529,"column":12},"end":{"line":531,"column":13}},"193":{"start":{"line":530,"column":16},"end":{"line":530,"column":105}},"194":{"start":{"line":532,"column":12},"end":{"line":532,"column":130}},"195":{"start":{"line":533,"column":12},"end":{"line":535,"column":13}},"196":{"start":{"line":534,"column":16},"end":{"line":534,"column":104}},"197":{"start":{"line":536,"column":12},"end":{"line":536,"column":22}},"198":{"start":{"line":551,"column":8},"end":{"line":562,"column":12}},"199":{"start":{"line":551,"column":48},"end":{"line":562,"column":10}},"200":{"start":{"line":552,"column":12},"end":{"line":552,"column":41}},"201":{"start":{"line":553,"column":36},"end":{"line":553,"column":84}},"202":{"start":{"line":554,"column":12},"end":{"line":556,"column":13}},"203":{"start":{"line":555,"column":16},"end":{"line":555,"column":86}},"204":{"start":{"line":557,"column":39},"end":{"line":557,"column":70}},"205":{"start":{"line":558,"column":12},"end":{"line":560,"column":13}},"206":{"start":{"line":559,"column":16},"end":{"line":559,"column":52}},"207":{"start":{"line":561,"column":12},"end":{"line":561,"column":22}},"208":{"start":{"line":565,"column":0},"end":{"line":565,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":78},"end":{"line":79,"column":5}},"line":72},"9":{"name":"(anonymous_9)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":13},"end":{"line":85,"column":5}},"line":83},"10":{"name":"(anonymous_10)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":17},"end":{"line":91,"column":5}},"line":89},"11":{"name":"(anonymous_11)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":21},"end":{"line":97,"column":5}},"line":95},"12":{"name":"(anonymous_12)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":31},"end":{"line":104,"column":5}},"line":102},"13":{"name":"(anonymous_13)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":34},"end":{"line":112,"column":5}},"line":110},"14":{"name":"(anonymous_14)","decl":{"start":{"line":116,"column":4},"end":{"line":116,"column":5}},"loc":{"start":{"line":116,"column":17},"end":{"line":118,"column":5}},"line":116},"15":{"name":"(anonymous_15)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":45},"end":{"line":151,"column":5}},"line":135},"16":{"name":"(anonymous_16)","decl":{"start":{"line":136,"column":27},"end":{"line":136,"column":28}},"loc":{"start":{"line":136,"column":48},"end":{"line":150,"column":10}},"line":136},"17":{"name":"(anonymous_17)","decl":{"start":{"line":136,"column":80},"end":{"line":136,"column":81}},"loc":{"start":{"line":136,"column":93},"end":{"line":150,"column":9}},"line":136},"18":{"name":"(anonymous_18)","decl":{"start":{"line":163,"column":4},"end":{"line":163,"column":5}},"loc":{"start":{"line":163,"column":32},"end":{"line":172,"column":5}},"line":163},"19":{"name":"(anonymous_19)","decl":{"start":{"line":164,"column":27},"end":{"line":164,"column":28}},"loc":{"start":{"line":164,"column":48},"end":{"line":171,"column":10}},"line":164},"20":{"name":"(anonymous_20)","decl":{"start":{"line":164,"column":80},"end":{"line":164,"column":81}},"loc":{"start":{"line":164,"column":93},"end":{"line":171,"column":9}},"line":164},"21":{"name":"(anonymous_21)","decl":{"start":{"line":187,"column":4},"end":{"line":187,"column":5}},"loc":{"start":{"line":187,"column":43},"end":{"line":218,"column":5}},"line":187},"22":{"name":"(anonymous_22)","decl":{"start":{"line":188,"column":27},"end":{"line":188,"column":28}},"loc":{"start":{"line":188,"column":48},"end":{"line":217,"column":10}},"line":188},"23":{"name":"(anonymous_23)","decl":{"start":{"line":188,"column":80},"end":{"line":188,"column":81}},"loc":{"start":{"line":188,"column":93},"end":{"line":217,"column":9}},"line":188},"24":{"name":"(anonymous_24)","decl":{"start":{"line":191,"column":34},"end":{"line":191,"column":35}},"loc":{"start":{"line":191,"column":44},"end":{"line":204,"column":14}},"line":191},"25":{"name":"(anonymous_25)","decl":{"start":{"line":191,"column":76},"end":{"line":191,"column":77}},"loc":{"start":{"line":191,"column":89},"end":{"line":204,"column":13}},"line":191},"26":{"name":"(anonymous_26)","decl":{"start":{"line":192,"column":35},"end":{"line":192,"column":36}},"loc":{"start":{"line":192,"column":60},"end":{"line":203,"column":17}},"line":192},"27":{"name":"(anonymous_27)","decl":{"start":{"line":195,"column":46},"end":{"line":195,"column":47}},"loc":{"start":{"line":195,"column":57},"end":{"line":197,"column":21}},"line":195},"28":{"name":"(anonymous_28)","decl":{"start":{"line":198,"column":45},"end":{"line":198,"column":46}},"loc":{"start":{"line":198,"column":51},"end":{"line":202,"column":21}},"line":198},"29":{"name":"(anonymous_29)","decl":{"start":{"line":239,"column":4},"end":{"line":239,"column":5}},"loc":{"start":{"line":239,"column":36},"end":{"line":266,"column":5}},"line":239},"30":{"name":"(anonymous_30)","decl":{"start":{"line":240,"column":27},"end":{"line":240,"column":28}},"loc":{"start":{"line":240,"column":48},"end":{"line":265,"column":10}},"line":240},"31":{"name":"(anonymous_31)","decl":{"start":{"line":240,"column":80},"end":{"line":240,"column":81}},"loc":{"start":{"line":240,"column":93},"end":{"line":265,"column":9}},"line":240},"32":{"name":"(anonymous_32)","decl":{"start":{"line":262,"column":38},"end":{"line":262,"column":39}},"loc":{"start":{"line":262,"column":44},"end":{"line":264,"column":14}},"line":262},"33":{"name":"(anonymous_33)","decl":{"start":{"line":262,"column":76},"end":{"line":262,"column":77}},"loc":{"start":{"line":262,"column":89},"end":{"line":264,"column":13}},"line":262},"34":{"name":"(anonymous_34)","decl":{"start":{"line":278,"column":4},"end":{"line":278,"column":5}},"loc":{"start":{"line":278,"column":38},"end":{"line":294,"column":5}},"line":278},"35":{"name":"(anonymous_35)","decl":{"start":{"line":279,"column":27},"end":{"line":279,"column":28}},"loc":{"start":{"line":279,"column":48},"end":{"line":293,"column":10}},"line":279},"36":{"name":"(anonymous_36)","decl":{"start":{"line":279,"column":80},"end":{"line":279,"column":81}},"loc":{"start":{"line":279,"column":93},"end":{"line":293,"column":9}},"line":279},"37":{"name":"(anonymous_37)","decl":{"start":{"line":310,"column":4},"end":{"line":310,"column":5}},"loc":{"start":{"line":310,"column":90},"end":{"line":363,"column":5}},"line":310},"38":{"name":"(anonymous_38)","decl":{"start":{"line":311,"column":27},"end":{"line":311,"column":28}},"loc":{"start":{"line":311,"column":48},"end":{"line":362,"column":10}},"line":311},"39":{"name":"(anonymous_39)","decl":{"start":{"line":311,"column":80},"end":{"line":311,"column":81}},"loc":{"start":{"line":311,"column":93},"end":{"line":362,"column":9}},"line":311},"40":{"name":"(anonymous_40)","decl":{"start":{"line":328,"column":53},"end":{"line":328,"column":54}},"loc":{"start":{"line":328,"column":64},"end":{"line":331,"column":21}},"line":328},"41":{"name":"(anonymous_41)","decl":{"start":{"line":336,"column":41},"end":{"line":336,"column":42}},"loc":{"start":{"line":336,"column":52},"end":{"line":339,"column":21}},"line":336},"42":{"name":"(anonymous_42)","decl":{"start":{"line":346,"column":53},"end":{"line":346,"column":54}},"loc":{"start":{"line":346,"column":64},"end":{"line":349,"column":21}},"line":346},"43":{"name":"(anonymous_43)","decl":{"start":{"line":354,"column":41},"end":{"line":354,"column":42}},"loc":{"start":{"line":354,"column":52},"end":{"line":357,"column":21}},"line":354},"44":{"name":"(anonymous_44)","decl":{"start":{"line":377,"column":4},"end":{"line":377,"column":5}},"loc":{"start":{"line":377,"column":64},"end":{"line":409,"column":5}},"line":377},"45":{"name":"(anonymous_45)","decl":{"start":{"line":378,"column":27},"end":{"line":378,"column":28}},"loc":{"start":{"line":378,"column":48},"end":{"line":408,"column":10}},"line":378},"46":{"name":"(anonymous_46)","decl":{"start":{"line":378,"column":80},"end":{"line":378,"column":81}},"loc":{"start":{"line":378,"column":93},"end":{"line":408,"column":9}},"line":378},"47":{"name":"(anonymous_47)","decl":{"start":{"line":394,"column":49},"end":{"line":394,"column":50}},"loc":{"start":{"line":394,"column":60},"end":{"line":397,"column":17}},"line":394},"48":{"name":"(anonymous_48)","decl":{"start":{"line":402,"column":37},"end":{"line":402,"column":38}},"loc":{"start":{"line":402,"column":48},"end":{"line":404,"column":17}},"line":402},"49":{"name":"(anonymous_49)","decl":{"start":{"line":423,"column":4},"end":{"line":423,"column":5}},"loc":{"start":{"line":423,"column":42},"end":{"line":460,"column":5}},"line":423},"50":{"name":"(anonymous_50)","decl":{"start":{"line":424,"column":27},"end":{"line":424,"column":28}},"loc":{"start":{"line":424,"column":48},"end":{"line":459,"column":10}},"line":424},"51":{"name":"(anonymous_51)","decl":{"start":{"line":424,"column":80},"end":{"line":424,"column":81}},"loc":{"start":{"line":424,"column":93},"end":{"line":459,"column":9}},"line":424},"52":{"name":"(anonymous_52)","decl":{"start":{"line":483,"column":4},"end":{"line":483,"column":5}},"loc":{"start":{"line":483,"column":46},"end":{"line":502,"column":5}},"line":483},"53":{"name":"(anonymous_53)","decl":{"start":{"line":484,"column":27},"end":{"line":484,"column":28}},"loc":{"start":{"line":484,"column":48},"end":{"line":501,"column":10}},"line":484},"54":{"name":"(anonymous_54)","decl":{"start":{"line":484,"column":80},"end":{"line":484,"column":81}},"loc":{"start":{"line":484,"column":93},"end":{"line":501,"column":9}},"line":484},"55":{"name":"(anonymous_55)","decl":{"start":{"line":517,"column":4},"end":{"line":517,"column":5}},"loc":{"start":{"line":517,"column":29},"end":{"line":538,"column":5}},"line":517},"56":{"name":"(anonymous_56)","decl":{"start":{"line":518,"column":27},"end":{"line":518,"column":28}},"loc":{"start":{"line":518,"column":48},"end":{"line":537,"column":10}},"line":518},"57":{"name":"(anonymous_57)","decl":{"start":{"line":518,"column":80},"end":{"line":518,"column":81}},"loc":{"start":{"line":518,"column":93},"end":{"line":537,"column":9}},"line":518},"58":{"name":"(anonymous_58)","decl":{"start":{"line":550,"column":4},"end":{"line":550,"column":5}},"loc":{"start":{"line":550,"column":25},"end":{"line":563,"column":5}},"line":550},"59":{"name":"(anonymous_59)","decl":{"start":{"line":551,"column":27},"end":{"line":551,"column":28}},"loc":{"start":{"line":551,"column":48},"end":{"line":562,"column":10}},"line":551},"60":{"name":"(anonymous_60)","decl":{"start":{"line":551,"column":80},"end":{"line":551,"column":81}},"loc":{"start":{"line":551,"column":93},"end":{"line":562,"column":9}},"line":551}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12},"8":{"loc":{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},{"start":{"line":140,"column":12},"end":{"line":142,"column":13}}],"line":140},"9":{"loc":{"start":{"line":143,"column":12},"end":{"line":147,"column":13}},"type":"if","locations":[{"start":{"line":143,"column":12},"end":{"line":147,"column":13}},{"start":{"line":143,"column":12},"end":{"line":147,"column":13}}],"line":143},"10":{"loc":{"start":{"line":167,"column":12},"end":{"line":169,"column":13}},"type":"if","locations":[{"start":{"line":167,"column":12},"end":{"line":169,"column":13}},{"start":{"line":167,"column":12},"end":{"line":169,"column":13}}],"line":167},"11":{"loc":{"start":{"line":200,"column":39},"end":{"line":200,"column":133}},"type":"cond-expr","locations":[{"start":{"line":200,"column":88},"end":{"line":200,"column":94}},{"start":{"line":200,"column":97},"end":{"line":200,"column":133}}],"line":200},"12":{"loc":{"start":{"line":200,"column":39},"end":{"line":200,"column":85}},"type":"binary-expr","locations":[{"start":{"line":200,"column":39},"end":{"line":200,"column":68}},{"start":{"line":200,"column":72},"end":{"line":200,"column":85}}],"line":200},"13":{"loc":{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},"type":"if","locations":[{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},{"start":{"line":206,"column":12},"end":{"line":208,"column":13}}],"line":206},"14":{"loc":{"start":{"line":206,"column":16},"end":{"line":206,"column":71}},"type":"binary-expr","locations":[{"start":{"line":206,"column":16},"end":{"line":206,"column":26}},{"start":{"line":206,"column":30},"end":{"line":206,"column":71}}],"line":206},"15":{"loc":{"start":{"line":209,"column":12},"end":{"line":211,"column":13}},"type":"if","locations":[{"start":{"line":209,"column":12},"end":{"line":211,"column":13}},{"start":{"line":209,"column":12},"end":{"line":211,"column":13}}],"line":209},"16":{"loc":{"start":{"line":241,"column":12},"end":{"line":243,"column":13}},"type":"if","locations":[{"start":{"line":241,"column":12},"end":{"line":243,"column":13}},{"start":{"line":241,"column":12},"end":{"line":243,"column":13}}],"line":241},"17":{"loc":{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},"type":"if","locations":[{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},{"start":{"line":244,"column":12},"end":{"line":246,"column":13}}],"line":244},"18":{"loc":{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},"type":"if","locations":[{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},{"start":{"line":247,"column":12},"end":{"line":249,"column":13}}],"line":247},"19":{"loc":{"start":{"line":250,"column":12},"end":{"line":253,"column":13}},"type":"if","locations":[{"start":{"line":250,"column":12},"end":{"line":253,"column":13}},{"start":{"line":250,"column":12},"end":{"line":253,"column":13}}],"line":250},"20":{"loc":{"start":{"line":283,"column":12},"end":{"line":285,"column":13}},"type":"if","locations":[{"start":{"line":283,"column":12},"end":{"line":285,"column":13}},{"start":{"line":283,"column":12},"end":{"line":285,"column":13}}],"line":283},"21":{"loc":{"start":{"line":286,"column":12},"end":{"line":289,"column":13}},"type":"if","locations":[{"start":{"line":286,"column":12},"end":{"line":289,"column":13}},{"start":{"line":286,"column":12},"end":{"line":289,"column":13}}],"line":286},"22":{"loc":{"start":{"line":290,"column":36},"end":{"line":290,"column":185}},"type":"cond-expr","locations":[{"start":{"line":290,"column":158},"end":{"line":290,"column":164}},{"start":{"line":290,"column":167},"end":{"line":290,"column":185}}],"line":290},"23":{"loc":{"start":{"line":290,"column":36},"end":{"line":290,"column":155}},"type":"binary-expr","locations":[{"start":{"line":290,"column":36},"end":{"line":290,"column":138}},{"start":{"line":290,"column":142},"end":{"line":290,"column":155}}],"line":290},"24":{"loc":{"start":{"line":290,"column":42},"end":{"line":290,"column":128}},"type":"cond-expr","locations":[{"start":{"line":290,"column":108},"end":{"line":290,"column":114}},{"start":{"line":290,"column":117},"end":{"line":290,"column":128}}],"line":290},"25":{"loc":{"start":{"line":290,"column":42},"end":{"line":290,"column":105}},"type":"binary-expr","locations":[{"start":{"line":290,"column":42},"end":{"line":290,"column":88}},{"start":{"line":290,"column":92},"end":{"line":290,"column":105}}],"line":290},"26":{"loc":{"start":{"line":310,"column":60},"end":{"line":310,"column":88}},"type":"default-arg","locations":[{"start":{"line":310,"column":83},"end":{"line":310,"column":88}}],"line":310},"27":{"loc":{"start":{"line":314,"column":12},"end":{"line":316,"column":13}},"type":"if","locations":[{"start":{"line":314,"column":12},"end":{"line":316,"column":13}},{"start":{"line":314,"column":12},"end":{"line":316,"column":13}}],"line":314},"28":{"loc":{"start":{"line":314,"column":16},"end":{"line":314,"column":187}},"type":"binary-expr","locations":[{"start":{"line":314,"column":17},"end":{"line":314,"column":91}},{"start":{"line":314,"column":97},"end":{"line":314,"column":186}}],"line":314},"29":{"loc":{"start":{"line":314,"column":17},"end":{"line":314,"column":91}},"type":"cond-expr","locations":[{"start":{"line":314,"column":66},"end":{"line":314,"column":72}},{"start":{"line":314,"column":75},"end":{"line":314,"column":91}}],"line":314},"30":{"loc":{"start":{"line":314,"column":17},"end":{"line":314,"column":63}},"type":"binary-expr","locations":[{"start":{"line":314,"column":17},"end":{"line":314,"column":37}},{"start":{"line":314,"column":41},"end":{"line":314,"column":63}}],"line":314},"31":{"loc":{"start":{"line":314,"column":97},"end":{"line":314,"column":186}},"type":"cond-expr","locations":[{"start":{"line":314,"column":148},"end":{"line":314,"column":154}},{"start":{"line":314,"column":157},"end":{"line":314,"column":186}}],"line":314},"32":{"loc":{"start":{"line":314,"column":97},"end":{"line":314,"column":145}},"type":"binary-expr","locations":[{"start":{"line":314,"column":97},"end":{"line":314,"column":118}},{"start":{"line":314,"column":122},"end":{"line":314,"column":145}}],"line":314},"33":{"loc":{"start":{"line":318,"column":12},"end":{"line":320,"column":13}},"type":"if","locations":[{"start":{"line":318,"column":12},"end":{"line":320,"column":13}},{"start":{"line":318,"column":12},"end":{"line":320,"column":13}}],"line":318},"34":{"loc":{"start":{"line":318,"column":16},"end":{"line":318,"column":209}},"type":"binary-expr","locations":[{"start":{"line":318,"column":17},"end":{"line":318,"column":102}},{"start":{"line":318,"column":108},"end":{"line":318,"column":208}}],"line":318},"35":{"loc":{"start":{"line":318,"column":17},"end":{"line":318,"column":102}},"type":"cond-expr","locations":[{"start":{"line":318,"column":66},"end":{"line":318,"column":72}},{"start":{"line":318,"column":75},"end":{"line":318,"column":102}}],"line":318},"36":{"loc":{"start":{"line":318,"column":17},"end":{"line":318,"column":63}},"type":"binary-expr","locations":[{"start":{"line":318,"column":17},"end":{"line":318,"column":37}},{"start":{"line":318,"column":41},"end":{"line":318,"column":63}}],"line":318},"37":{"loc":{"start":{"line":318,"column":108},"end":{"line":318,"column":208}},"type":"cond-expr","locations":[{"start":{"line":318,"column":159},"end":{"line":318,"column":165}},{"start":{"line":318,"column":168},"end":{"line":318,"column":208}}],"line":318},"38":{"loc":{"start":{"line":318,"column":108},"end":{"line":318,"column":156}},"type":"binary-expr","locations":[{"start":{"line":318,"column":108},"end":{"line":318,"column":129}},{"start":{"line":318,"column":133},"end":{"line":318,"column":156}}],"line":318},"39":{"loc":{"start":{"line":322,"column":12},"end":{"line":324,"column":13}},"type":"if","locations":[{"start":{"line":322,"column":12},"end":{"line":324,"column":13}},{"start":{"line":322,"column":12},"end":{"line":324,"column":13}}],"line":322},"40":{"loc":{"start":{"line":322,"column":16},"end":{"line":322,"column":195}},"type":"binary-expr","locations":[{"start":{"line":322,"column":17},"end":{"line":322,"column":95}},{"start":{"line":322,"column":101},"end":{"line":322,"column":194}}],"line":322},"41":{"loc":{"start":{"line":322,"column":17},"end":{"line":322,"column":95}},"type":"cond-expr","locations":[{"start":{"line":322,"column":66},"end":{"line":322,"column":72}},{"start":{"line":322,"column":75},"end":{"line":322,"column":95}}],"line":322},"42":{"loc":{"start":{"line":322,"column":17},"end":{"line":322,"column":63}},"type":"binary-expr","locations":[{"start":{"line":322,"column":17},"end":{"line":322,"column":37}},{"start":{"line":322,"column":41},"end":{"line":322,"column":63}}],"line":322},"43":{"loc":{"start":{"line":322,"column":101},"end":{"line":322,"column":194}},"type":"cond-expr","locations":[{"start":{"line":322,"column":152},"end":{"line":322,"column":158}},{"start":{"line":322,"column":161},"end":{"line":322,"column":194}}],"line":322},"44":{"loc":{"start":{"line":322,"column":101},"end":{"line":322,"column":149}},"type":"binary-expr","locations":[{"start":{"line":322,"column":101},"end":{"line":322,"column":122}},{"start":{"line":322,"column":126},"end":{"line":322,"column":149}}],"line":322},"45":{"loc":{"start":{"line":325,"column":12},"end":{"line":360,"column":13}},"type":"if","locations":[{"start":{"line":325,"column":12},"end":{"line":360,"column":13}},{"start":{"line":325,"column":12},"end":{"line":360,"column":13}}],"line":325},"46":{"loc":{"start":{"line":326,"column":16},"end":{"line":333,"column":17}},"type":"if","locations":[{"start":{"line":326,"column":16},"end":{"line":333,"column":17}},{"start":{"line":326,"column":16},"end":{"line":333,"column":17}}],"line":326},"47":{"loc":{"start":{"line":334,"column":16},"end":{"line":341,"column":17}},"type":"if","locations":[{"start":{"line":334,"column":16},"end":{"line":341,"column":17}},{"start":{"line":334,"column":16},"end":{"line":341,"column":17}}],"line":334},"48":{"loc":{"start":{"line":344,"column":16},"end":{"line":351,"column":17}},"type":"if","locations":[{"start":{"line":344,"column":16},"end":{"line":351,"column":17}},{"start":{"line":344,"column":16},"end":{"line":351,"column":17}}],"line":344},"49":{"loc":{"start":{"line":352,"column":16},"end":{"line":359,"column":17}},"type":"if","locations":[{"start":{"line":352,"column":16},"end":{"line":359,"column":17}},{"start":{"line":352,"column":16},"end":{"line":359,"column":17}}],"line":352},"50":{"loc":{"start":{"line":381,"column":12},"end":{"line":383,"column":13}},"type":"if","locations":[{"start":{"line":381,"column":12},"end":{"line":383,"column":13}},{"start":{"line":381,"column":12},"end":{"line":383,"column":13}}],"line":381},"51":{"loc":{"start":{"line":381,"column":16},"end":{"line":381,"column":187}},"type":"binary-expr","locations":[{"start":{"line":381,"column":17},"end":{"line":381,"column":91}},{"start":{"line":381,"column":97},"end":{"line":381,"column":186}}],"line":381},"52":{"loc":{"start":{"line":381,"column":17},"end":{"line":381,"column":91}},"type":"cond-expr","locations":[{"start":{"line":381,"column":66},"end":{"line":381,"column":72}},{"start":{"line":381,"column":75},"end":{"line":381,"column":91}}],"line":381},"53":{"loc":{"start":{"line":381,"column":17},"end":{"line":381,"column":63}},"type":"binary-expr","locations":[{"start":{"line":381,"column":17},"end":{"line":381,"column":37}},{"start":{"line":381,"column":41},"end":{"line":381,"column":63}}],"line":381},"54":{"loc":{"start":{"line":381,"column":97},"end":{"line":381,"column":186}},"type":"cond-expr","locations":[{"start":{"line":381,"column":148},"end":{"line":381,"column":154}},{"start":{"line":381,"column":157},"end":{"line":381,"column":186}}],"line":381},"55":{"loc":{"start":{"line":381,"column":97},"end":{"line":381,"column":145}},"type":"binary-expr","locations":[{"start":{"line":381,"column":97},"end":{"line":381,"column":118}},{"start":{"line":381,"column":122},"end":{"line":381,"column":145}}],"line":381},"56":{"loc":{"start":{"line":385,"column":12},"end":{"line":387,"column":13}},"type":"if","locations":[{"start":{"line":385,"column":12},"end":{"line":387,"column":13}},{"start":{"line":385,"column":12},"end":{"line":387,"column":13}}],"line":385},"57":{"loc":{"start":{"line":385,"column":16},"end":{"line":385,"column":209}},"type":"binary-expr","locations":[{"start":{"line":385,"column":17},"end":{"line":385,"column":102}},{"start":{"line":385,"column":108},"end":{"line":385,"column":208}}],"line":385},"58":{"loc":{"start":{"line":385,"column":17},"end":{"line":385,"column":102}},"type":"cond-expr","locations":[{"start":{"line":385,"column":66},"end":{"line":385,"column":72}},{"start":{"line":385,"column":75},"end":{"line":385,"column":102}}],"line":385},"59":{"loc":{"start":{"line":385,"column":17},"end":{"line":385,"column":63}},"type":"binary-expr","locations":[{"start":{"line":385,"column":17},"end":{"line":385,"column":37}},{"start":{"line":385,"column":41},"end":{"line":385,"column":63}}],"line":385},"60":{"loc":{"start":{"line":385,"column":108},"end":{"line":385,"column":208}},"type":"cond-expr","locations":[{"start":{"line":385,"column":159},"end":{"line":385,"column":165}},{"start":{"line":385,"column":168},"end":{"line":385,"column":208}}],"line":385},"61":{"loc":{"start":{"line":385,"column":108},"end":{"line":385,"column":156}},"type":"binary-expr","locations":[{"start":{"line":385,"column":108},"end":{"line":385,"column":129}},{"start":{"line":385,"column":133},"end":{"line":385,"column":156}}],"line":385},"62":{"loc":{"start":{"line":389,"column":12},"end":{"line":391,"column":13}},"type":"if","locations":[{"start":{"line":389,"column":12},"end":{"line":391,"column":13}},{"start":{"line":389,"column":12},"end":{"line":391,"column":13}}],"line":389},"63":{"loc":{"start":{"line":389,"column":16},"end":{"line":389,"column":195}},"type":"binary-expr","locations":[{"start":{"line":389,"column":17},"end":{"line":389,"column":95}},{"start":{"line":389,"column":101},"end":{"line":389,"column":194}}],"line":389},"64":{"loc":{"start":{"line":389,"column":17},"end":{"line":389,"column":95}},"type":"cond-expr","locations":[{"start":{"line":389,"column":66},"end":{"line":389,"column":72}},{"start":{"line":389,"column":75},"end":{"line":389,"column":95}}],"line":389},"65":{"loc":{"start":{"line":389,"column":17},"end":{"line":389,"column":63}},"type":"binary-expr","locations":[{"start":{"line":389,"column":17},"end":{"line":389,"column":37}},{"start":{"line":389,"column":41},"end":{"line":389,"column":63}}],"line":389},"66":{"loc":{"start":{"line":389,"column":101},"end":{"line":389,"column":194}},"type":"cond-expr","locations":[{"start":{"line":389,"column":152},"end":{"line":389,"column":158}},{"start":{"line":389,"column":161},"end":{"line":389,"column":194}}],"line":389},"67":{"loc":{"start":{"line":389,"column":101},"end":{"line":389,"column":149}},"type":"binary-expr","locations":[{"start":{"line":389,"column":101},"end":{"line":389,"column":122}},{"start":{"line":389,"column":126},"end":{"line":389,"column":149}}],"line":389},"68":{"loc":{"start":{"line":392,"column":12},"end":{"line":399,"column":13}},"type":"if","locations":[{"start":{"line":392,"column":12},"end":{"line":399,"column":13}},{"start":{"line":392,"column":12},"end":{"line":399,"column":13}}],"line":392},"69":{"loc":{"start":{"line":400,"column":12},"end":{"line":406,"column":13}},"type":"if","locations":[{"start":{"line":400,"column":12},"end":{"line":406,"column":13}},{"start":{"line":400,"column":12},"end":{"line":406,"column":13}}],"line":400},"70":{"loc":{"start":{"line":426,"column":12},"end":{"line":428,"column":13}},"type":"if","locations":[{"start":{"line":426,"column":12},"end":{"line":428,"column":13}},{"start":{"line":426,"column":12},"end":{"line":428,"column":13}}],"line":426},"71":{"loc":{"start":{"line":431,"column":12},"end":{"line":433,"column":13}},"type":"if","locations":[{"start":{"line":431,"column":12},"end":{"line":433,"column":13}},{"start":{"line":431,"column":12},"end":{"line":433,"column":13}}],"line":431},"72":{"loc":{"start":{"line":431,"column":16},"end":{"line":431,"column":71}},"type":"binary-expr","locations":[{"start":{"line":431,"column":16},"end":{"line":431,"column":26}},{"start":{"line":431,"column":30},"end":{"line":431,"column":71}}],"line":431},"73":{"loc":{"start":{"line":434,"column":117},"end":{"line":434,"column":196}},"type":"cond-expr","locations":[{"start":{"line":434,"column":162},"end":{"line":434,"column":168}},{"start":{"line":434,"column":171},"end":{"line":434,"column":196}}],"line":434},"74":{"loc":{"start":{"line":434,"column":117},"end":{"line":434,"column":159}},"type":"binary-expr","locations":[{"start":{"line":434,"column":117},"end":{"line":434,"column":135}},{"start":{"line":434,"column":139},"end":{"line":434,"column":159}}],"line":434},"75":{"loc":{"start":{"line":435,"column":12},"end":{"line":437,"column":13}},"type":"if","locations":[{"start":{"line":435,"column":12},"end":{"line":437,"column":13}},{"start":{"line":435,"column":12},"end":{"line":437,"column":13}}],"line":435},"76":{"loc":{"start":{"line":438,"column":23},"end":{"line":438,"column":102}},"type":"cond-expr","locations":[{"start":{"line":438,"column":68},"end":{"line":438,"column":74}},{"start":{"line":438,"column":77},"end":{"line":438,"column":102}}],"line":438},"77":{"loc":{"start":{"line":438,"column":23},"end":{"line":438,"column":65}},"type":"binary-expr","locations":[{"start":{"line":438,"column":23},"end":{"line":438,"column":41}},{"start":{"line":438,"column":45},"end":{"line":438,"column":65}}],"line":438},"78":{"loc":{"start":{"line":439,"column":12},"end":{"line":443,"column":13}},"type":"if","locations":[{"start":{"line":439,"column":12},"end":{"line":443,"column":13}},{"start":{"line":439,"column":12},"end":{"line":443,"column":13}}],"line":439},"79":{"loc":{"start":{"line":483,"column":26},"end":{"line":483,"column":44}},"type":"default-arg","locations":[{"start":{"line":483,"column":39},"end":{"line":483,"column":44}}],"line":483},"80":{"loc":{"start":{"line":487,"column":12},"end":{"line":492,"column":13}},"type":"if","locations":[{"start":{"line":487,"column":12},"end":{"line":492,"column":13}},{"start":{"line":487,"column":12},"end":{"line":492,"column":13}}],"line":487},"81":{"loc":{"start":{"line":494,"column":12},"end":{"line":500,"column":13}},"type":"if","locations":[{"start":{"line":494,"column":12},"end":{"line":500,"column":13}},{"start":{"line":494,"column":12},"end":{"line":500,"column":13}}],"line":494},"82":{"loc":{"start":{"line":494,"column":16},"end":{"line":494,"column":69}},"type":"binary-expr","locations":[{"start":{"line":494,"column":16},"end":{"line":494,"column":22}},{"start":{"line":494,"column":26},"end":{"line":494,"column":69}}],"line":494},"83":{"loc":{"start":{"line":521,"column":12},"end":{"line":523,"column":13}},"type":"if","locations":[{"start":{"line":521,"column":12},"end":{"line":523,"column":13}},{"start":{"line":521,"column":12},"end":{"line":523,"column":13}}],"line":521},"84":{"loc":{"start":{"line":521,"column":16},"end":{"line":521,"column":108}},"type":"binary-expr","locations":[{"start":{"line":521,"column":16},"end":{"line":521,"column":63}},{"start":{"line":521,"column":67},"end":{"line":521,"column":108}}],"line":521},"85":{"loc":{"start":{"line":525,"column":12},"end":{"line":527,"column":13}},"type":"if","locations":[{"start":{"line":525,"column":12},"end":{"line":527,"column":13}},{"start":{"line":525,"column":12},"end":{"line":527,"column":13}}],"line":525},"86":{"loc":{"start":{"line":525,"column":16},"end":{"line":525,"column":71}},"type":"binary-expr","locations":[{"start":{"line":525,"column":16},"end":{"line":525,"column":26}},{"start":{"line":525,"column":30},"end":{"line":525,"column":71}}],"line":525},"87":{"loc":{"start":{"line":530,"column":38},"end":{"line":530,"column":103}},"type":"cond-expr","locations":[{"start":{"line":530,"column":87},"end":{"line":530,"column":93}},{"start":{"line":530,"column":96},"end":{"line":530,"column":103}}],"line":530},"88":{"loc":{"start":{"line":530,"column":38},"end":{"line":530,"column":84}},"type":"binary-expr","locations":[{"start":{"line":530,"column":38},"end":{"line":530,"column":67}},{"start":{"line":530,"column":71},"end":{"line":530,"column":84}}],"line":530},"89":{"loc":{"start":{"line":533,"column":12},"end":{"line":535,"column":13}},"type":"if","locations":[{"start":{"line":533,"column":12},"end":{"line":535,"column":13}},{"start":{"line":533,"column":12},"end":{"line":535,"column":13}}],"line":533},"90":{"loc":{"start":{"line":554,"column":12},"end":{"line":556,"column":13}},"type":"if","locations":[{"start":{"line":554,"column":12},"end":{"line":556,"column":13}},{"start":{"line":554,"column":12},"end":{"line":556,"column":13}}],"line":554}},"s":{"0":1,"1":164,"2":0,"3":86,"4":163,"5":163,"6":0,"7":1,"8":1,"9":1,"10":249,"11":86,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":11,"25":12,"26":1,"27":1,"28":34,"29":40,"30":7,"31":7,"32":7,"33":7,"34":7,"35":7,"36":1,"37":6,"38":1,"39":1,"40":5,"41":5,"42":2,"43":2,"44":2,"45":2,"46":2,"47":1,"48":1,"49":4,"50":4,"51":4,"52":4,"53":4,"54":10,"55":10,"56":10,"57":10,"58":10,"59":10,"60":10,"61":10,"62":10,"63":4,"64":4,"65":1,"66":3,"67":1,"68":2,"69":2,"70":10,"71":2,"72":14,"73":14,"74":14,"75":1,"76":13,"77":1,"78":12,"79":1,"80":11,"81":1,"82":10,"83":10,"84":10,"85":10,"86":10,"87":10,"88":10,"89":10,"90":3,"91":3,"92":3,"93":3,"94":3,"95":1,"96":2,"97":1,"98":1,"99":1,"100":1,"101":6,"102":6,"103":6,"104":6,"105":1,"106":5,"107":1,"108":4,"109":1,"110":3,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":2,"122":2,"123":2,"124":2,"125":2,"126":2,"127":1,"128":1,"129":1,"130":1,"131":3,"132":5,"133":5,"134":5,"135":5,"136":1,"137":4,"138":1,"139":3,"140":1,"141":2,"142":2,"143":2,"144":2,"145":2,"146":2,"147":1,"148":1,"149":1,"150":1,"151":2,"152":5,"153":5,"154":5,"155":5,"156":1,"157":4,"158":4,"159":1,"160":3,"161":3,"162":1,"163":2,"164":2,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":0,"172":8,"173":8,"174":8,"175":8,"176":3,"177":5,"178":8,"179":8,"180":7,"181":7,"182":1,"183":4,"184":4,"185":4,"186":4,"187":1,"188":3,"189":3,"190":1,"191":2,"192":2,"193":6,"194":2,"195":2,"196":1,"197":2,"198":8,"199":8,"200":8,"201":8,"202":8,"203":1,"204":7,"205":7,"206":10,"207":7,"208":1},"f":{"0":86,"1":164,"2":0,"3":86,"4":163,"5":1,"6":249,"7":1,"8":1,"9":11,"10":12,"11":1,"12":1,"13":34,"14":40,"15":7,"16":7,"17":7,"18":2,"19":2,"20":2,"21":4,"22":4,"23":4,"24":10,"25":10,"26":10,"27":10,"28":10,"29":14,"30":14,"31":14,"32":10,"33":10,"34":3,"35":3,"36":3,"37":6,"38":6,"39":6,"40":1,"41":1,"42":2,"43":1,"44":5,"45":5,"46":5,"47":2,"48":1,"49":5,"50":5,"51":5,"52":8,"53":8,"54":8,"55":4,"56":4,"57":4,"58":8,"59":8,"60":8},"b":{"0":[1,1,1],"1":[164,0],"2":[86,86],"3":[85,164],"4":[86,86],"5":[1,1,1],"6":[0,1],"7":[1,1],"8":[1,6],"9":[1,5],"10":[1,1],"11":[0,10],"12":[10,10],"13":[1,3],"14":[4,3],"15":[1,2],"16":[1,13],"17":[1,12],"18":[1,11],"19":[1,10],"20":[1,2],"21":[1,1],"22":[0,1],"23":[1,1],"24":[0,1],"25":[1,1],"26":[5],"27":[1,5],"28":[6,5],"29":[0,6],"30":[6,6],"31":[3,2],"32":[5,5],"33":[1,4],"34":[5,4],"35":[0,5],"36":[5,5],"37":[2,2],"38":[4,4],"39":[1,3],"40":[4,3],"41":[0,4],"42":[4,4],"43":[1,2],"44":[3,3],"45":[1,2],"46":[1,0],"47":[1,0],"48":[2,0],"49":[1,1],"50":[1,4],"51":[5,4],"52":[0,5],"53":[5,5],"54":[3,1],"55":[4,4],"56":[1,3],"57":[4,3],"58":[0,4],"59":[4,4],"60":[2,1],"61":[3,3],"62":[1,2],"63":[3,2],"64":[0,3],"65":[3,3],"66":[1,1],"67":[2,2],"68":[2,0],"69":[1,1],"70":[1,4],"71":[1,3],"72":[4,1],"73":[0,3],"74":[3,3],"75":[1,2],"76":[0,2],"77":[2,2],"78":[1,1],"79":[3],"80":[3,5],"81":[7,1],"82":[8,3],"83":[1,3],"84":[4,2],"85":[1,2],"86":[3,2],"87":[0,6],"88":[6,6],"89":[1,1],"90":[1,7]},"inputSourceMap":{"version":3,"file":"C:/Users/Steph/OneDrive/Documents/Programming-stuff/GitHub/GridFS-file-tree-manager/src/index.ts","sources":["C:/Users/Steph/OneDrive/Documents/Programming-stuff/GitHub/GridFS-file-tree-manager/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { MongoClient, GridFSBucket,  Db, ObjectId, InsertOneResult, GridFSBucketReadStream, GridFSFile} from \"mongodb\"\r\nimport {Readable} from \"stream\"\r\nimport JSZip, { OutputType } from \"jszip\"\r\n\r\n/**\r\n * Shape of the object to be provided as an argument for the `options` parameter\r\n * of the `uploadFile` method on the MongoFileTree class.\r\n */\r\ninterface FileOptions{\r\n    /** Name of the file being uploaded  */\r\n    name: string,\r\n    /** Size of the file chunks in GridFS */\r\n    chunkSize: number,\r\n    /** Custom metadata properties to add to the file. Any property can be added besides 'path', 'parentDirectory', and 'isLatest' can be added. Is optional.  */\r\n    customMetadata?:MetadataOptions\r\n}\r\n\r\n/**\r\n * Object type representing custom metadata that the user can add to folders and files.\r\n * Can have any property except 'path', 'parentDirectory', and 'isLatest'.\r\n * This prevents users from improperly modifying these properties using class methods, as they\r\n * are critical to the basic functioning of the file tree.\r\n */\r\ntype MetadataOptions = Omit<object, \"path\" | \"parentDirectory\"| \"isLatest\">\r\n\r\n/** Stores a file tree in MongoDB using GridFS.\r\n * Files will be stored in a GridFS Bucket, and the documents in the `files` collection of the\r\n * bucket will have the following shape:\r\n * ```\r\n * {\r\n * \"_id\" : <ObjectId>,\r\n * \"length\" : <num>,\r\n * \"chunkSize\" : <num>,\r\n * \"uploadDate\" : <timestamp>,\r\n * \"filename\" : <string>,\r\n * \"metadata\" : {\r\n *      \"parentDirectory\":<string>, //Absolute path of the folder where the file is located\r\n *      \"path\":<string>, //Absolute path of the file\r\n *      \"isLatest\":<boolean>, //Is this the latest version of the file or not\r\n *      ...\r\n *  },\r\n * }\r\n * ```\r\n * The file tree can store multiple versions of a file.\r\n * The name of the file cannot have the following characters: /, $, %, ?, @, \", ', !, $, >, <, *, &, {,}, #, =,`, |, :, +, and whitespace characters.\r\n * An error will be raised if the user attempts to upload a file with those characters in its name or change a file's name\r\n * to a name that has those characters. The same is true for folder names. The folders of the file tree are stored as\r\n * documents in a separate collection from the bucket and possess the following shape in MongoDB:\r\n * ```\r\n *\r\n * {\r\n * \"_id\": <ObjectId>,\r\n * \"name\": <string>,\r\n * \"path\": <string>, //Absolute path of the folder\r\n * \"parentDirectory\":<string>, //Absolute path of the folder's parent folder.\r\n * \"customMetadata\": <object> //customMetadata can have any property specified by the user besides \"isLatest\", \"path\", or \"parentDirectory\"\r\n * }\r\n *\r\n * ```\r\n * The collection that stores folders is treated as the \"root directory\" of the file tree, with the\r\n * root directory's absolute path being the same as the name of the collection. A\r\n * `FileTree` object will also have a \"current working directory\",\r\n * with the absolute path to it being stored in the `currentWorkingDirectory` property.\r\n * The `currentWorkingDirectory` property will be the root directory when initialized.\r\n * The methods on this class to upload files and create folders automatically puts them under the\r\n * current working directory.\r\n * Note: this class automatically connects to MongoDB for all methods.\r\n */\r\nclass MongoFileTree{\r\n\r\n    private _currentWorkingDirectory: string\r\n    private _bucket: GridFSBucket\r\n    private _db:Db\r\n    private _folderCollectionName: string\r\n    private _client:MongoClient\r\n    private _bucketName: string\r\n\r\n    /**\r\n     * @constructor\r\n     * Connect to a MongoDB database that has a file tree. If any part of the file tree (database, folder storage collection, GridFS Bucket)\r\n     * does not already exist, it is created\r\n     * @param {string} mongoConnectionUrl - Connection URL to a MongoDB server\r\n     * @param {string} dbName - Name of a MongoDB database\r\n     * @param {string} bucketName - Name of the GridFS bucket that will store the files of the file tree\r\n     * @param {string} folderCollectionName - Name of the collection in the Mongo database specified by dbName\r\n     * that will be used for folder storage, store documents representing folders in the file tree\r\n     */\r\n    constructor(mongoConnectionUrl: string, dbName: string, bucketName: string, folderCollectionName: string){\r\n        this._client = new MongoClient(mongoConnectionUrl)\r\n\r\n        this._currentWorkingDirectory = folderCollectionName\r\n\r\n        this._bucket  = new GridFSBucket(this._client.db(dbName), {bucketName})\r\n\r\n        this._db= this._client.db(dbName)\r\n\r\n        this._folderCollectionName = folderCollectionName\r\n\r\n        this._bucketName = bucketName\r\n    }\r\n    /**\r\n     * Mongo database storing the file tree.\r\n     */\r\n    public get db(){\r\n        return this._db\r\n    }\r\n    /**\r\n     * GridFS bucket that stores the files of the file tree.\r\n     */\r\n    public get bucket(){\r\n        return this._bucket\r\n    }\r\n    /**\r\n     * Name of the GridFS bucket that stores the files of the file tree.\r\n     */\r\n    public get bucketName(){\r\n        return this._bucketName\r\n    }\r\n    /**\r\n     * Name of the collection in the Mongo database specified by dbName\r\n     * that will be used for folder storage, storing documents representing folders in the file tree.\r\n     */\r\n    public get folderCollectionName(){\r\n        return this._folderCollectionName\r\n    }\r\n    /**\r\n     * Absolute path of the current working directory of the file tree.\r\n     * This directory is where the files uploaded by the uploadFile method\r\n     * and the folders created by the createFolder method will be located.\r\n     */\r\n    public get currentWorkingDirectory(){\r\n        return this._currentWorkingDirectory\r\n    }\r\n    /**\r\n     * MongoDB client being used for the file tree.\r\n     */\r\n    public get client(){\r\n        return this._client\r\n    }\r\n\r\n    /**\r\n     * @description Creates a document representing a folder in the collection specified by `folderCollectionName`.\r\n     * Its parent directory will be the current value of the `currentWorkingDirectory` property.\r\n     * Will return an error if a folder with the name provided to the method already\r\n     * exists in the current working directory of the file tree.\r\n     * @param {string} folderName Name of the folder\r\n     * @param {object} customMetadata Custom metadata properties to add to the folder.\r\n     * Any property can be added except `path`, `isLatest`, or `parentDirectory`.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * //Creates new folder with path sample-folder/subfolder-sample\r\n     * let result = await fileTree.createFolder(\"subfolder-sample\") //MongoDB InsertOneResult with the id of the document representing the folder\r\n     */\r\n\r\n    createFolder(folderName: string, customMetadata?: MetadataOptions): Promise<InsertOneResult>{\r\n        return new Promise<InsertOneResult>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            const path = this.currentWorkingDirectory+`/${folderName}`\r\n\r\n            const doesFolderExist = Boolean(await this._db.collection(this._folderCollectionName).findOne({\"path\":path}))\r\n            if(doesFolderExist){\r\n                return reject(new Error(`Folder with name ${folderName} already exists in the current directory`))\r\n            }\r\n            if(folderName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                // @ts-ignore\r\n                const errSymbol = folderName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]\r\n                return reject(new Error(`Character \"${errSymbol}\" cannot be used as part of a folder name`))\r\n            }\r\n\r\n            const result =  await this._db.collection(this._folderCollectionName).insertOne({name:folderName, path, parentDirectory:this.currentWorkingDirectory, customMetadata:{...customMetadata}})\r\n            resolve(result)\r\n        })\r\n    }\r\n    /**\r\n     * @description Returns a promise which resolves to a `GridFSBucketReadStream` of a file stored in the\r\n     * GridFS Bucket specified by the `bucketName` property.\r\n     * @param {string} filePath Absolute path of the file to get a readable stream of\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * let stream = await fileTree.getFileReadStream(\"sample-folder/sample.txt\")\r\n     */\r\n\r\n    getFileReadStream(filePath: string): Promise<GridFSBucketReadStream>{\r\n        return new Promise<GridFSBucketReadStream>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            const file = (await this._bucket.find({\"metadata.path\":filePath, \"metadata.isLatest\":true}).toArray())[0]\r\n\r\n            if(!file){\r\n                return reject(new Error(`File with path ${filePath} does not exist`))\r\n            }\r\n            resolve(this._bucket.openDownloadStream(file._id))\r\n        })\r\n\r\n    }\r\n    /**\r\n     * @description Lets the user download the folder specified in the `folderPath` parameter as a zip file. The form which the zip file is returned varies\r\n     * based on the argument provided for the returnType parameter.\r\n     * @param {string} folderPath String representing the absolute path of the folder\r\n     * @param {string} returnType String specifying the form in which the zip file of the target folder should be returned. Valid options are 'base64',\r\n     * 'nodebuffer' (NodeJS buffer), 'array' (array of bytes (numbers between 255 and 0)), 'uint8array','arraybuffer', 'blob', and 'binarystring'.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * //Returns an array of bytes (numbers between 255 and 0) representing the data of the zip file\r\n     * let zip = await fileTree.downloadFolder(\"sample-folder/subfolder-sample\", \"array\")\r\n     */\r\n    downloadFolder(folderPath: string, returnType: OutputType): Promise<Buffer|Uint8Array|string|Blob|number[]|ArrayBuffer>{\r\n        return new Promise<Buffer|Uint8Array|string|Blob|number[]|ArrayBuffer>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            const folderZip = new JSZip()\r\n\r\n            const downloadAsync = async (file: GridFSFile): Promise<void> =>{\r\n                return new Promise<void>((resolveFileDownload)=>{\r\n                    const downloadStream = this._bucket.openDownloadStream(file._id)\r\n                    let data = ''\r\n                    downloadStream.on(\"data\",(chunk)=>{\r\n                        data+=chunk.toString(\"base64\")\r\n                    })\r\n                    downloadStream.on(\"end\",()=>{\r\n                        folderZip.file(file.metadata?.path.slice(folderPath.length+1), data, {createFolders:true, base64:true})\r\n                        resolveFileDownload()\r\n                    })\r\n                })\r\n            }\r\n\r\n            const topFolder = await this._db.collection(this._folderCollectionName).findOne({\"path\":folderPath})\r\n\r\n            if(!topFolder && folderPath !== this._folderCollectionName){\r\n                return reject(new Error(`Folder with path ${folderPath} does not exist`))\r\n            }\r\n\r\n            if(!['base64','nodebuffer', 'array', 'uint8array','arraybuffer', 'blob', 'binarystring'].includes(returnType)){\r\n                return reject(new Error(`Invalid argument for parameter returnType. Argument must either be 'base64','nodebuffer', 'array', 'uint8array','arraybuffer', 'blob', or 'binarystring'.`))\r\n            }\r\n\r\n            const allFiles: GridFSFile[] = await this._bucket.find({\"metadata.isLatest\":true, \"metadata.parentDirectory\":new RegExp(\"^\"+folderPath)}).toArray()\r\n\r\n\r\n            for(const file of allFiles){\r\n                await downloadAsync(file)\r\n            }\r\n            return resolve(await folderZip.generateAsync({type:returnType}))\r\n        })\r\n    }\r\n    /**\r\n     * @description Upload a file to the GridFS Bucket file tree, with the parent directory of the file being\r\n     * the current working directory of the file tree.\r\n     * If a file with the name provided to the method from the `options` parameter already exists\r\n     * in the current working directory of the file tree,\r\n     * the uploaded file will be treated as the latest version of that file, with the\r\n     * `isLatest` metadata property of the uploaded file being true and the `isLatest` property of the\r\n     * previous file being set to false.\r\n     * @param {Readable} fileStream Valid readable stream\r\n     * @param {FileOptions} options Options for the file. Mandatory properties are `name` and `chunkSize`\r\n     * (the size of the chunks of the file in GridFS in bytes).\r\n     * The `customMetadata` property is optional.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * // id of the file in file tree GridFS bucket\r\n     * let id = await fileTree.uploadFile(fs.createReadStream(\"sample.txt\"), {name:\"sample.txt\", chunkSize:1048576, customMetadata:{favourite:true}})\r\n     */\r\n    uploadFile(fileStream: Readable, options: FileOptions): Promise<ObjectId>{\r\n        return new Promise<ObjectId>(async (resolve, reject)=>{\r\n            if (!(fileStream instanceof Readable)){\r\n                return reject(new Error(\"Argument for parameter fileStream is not a valid readable stream\"))\r\n            }\r\n\r\n            if(!options.name){\r\n                return reject(new Error(\"Missing 'name' property for 'options' parameter.\"))\r\n            }\r\n\r\n            if(!options.chunkSize){\r\n                return reject(new Error(\"Missing 'chunkSize' property for 'options' parameter.\"))\r\n            }\r\n\r\n            if(options.name.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                // @ts-ignore\r\n                return reject(new Error(`Character \"${options.name.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]}\" cannot be used as part of a file name`))\r\n            }\r\n\r\n            const path = this.currentWorkingDirectory+`/${options.name}`\r\n\r\n            await this._client.connect()\r\n\r\n            this._db.collection(this._bucketName+\".files\").findOneAndUpdate({\"metadata.path\":path, \"metadata.isLatest\":true},{$set:{\"metadata.isLatest\":false}})\r\n            const uploadStream = this._bucket.openUploadStream(options.name, {\r\n\r\n                chunkSizeBytes:options.chunkSize,\r\n\r\n                metadata:{\r\n                    parentDirectory:this.currentWorkingDirectory,\r\n                    path,\r\n                    isLatest:true,\r\n                    ...options.customMetadata\r\n                }\r\n\r\n            })\r\n\r\n            fileStream.pipe(uploadStream)\r\n            uploadStream.on(\"finish\",async ()=>{\r\n                resolve(uploadStream.id)\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @description Change the name of a file in the file tree. This also changes its `path` metadata property accordingly.\r\n     * @param {string} newName New name for the file\r\n     * @param {string} filePath Absolute path of the file that you want to change the name of\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFileName(\"new-file-name\", \"sample-folder/old-file-name.txt\") //File now has path sample-folder/new-file-name.txt\r\n     */\r\n     changeFileName(newName:string, filePath:string): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            const allFileVersions = this._bucket.find({\"metadata.path\":filePath})\r\n\r\n            if(!(await allFileVersions.hasNext())){\r\n                return reject(new Error(`File with path ${filePath} does not exist`))\r\n            }\r\n\r\n            if(newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                // @ts-ignore\r\n                return reject(new Error(`Character \"${newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]}\" cannot be used as part of a file name`))\r\n            }\r\n\r\n            const parentDirectory = (await allFileVersions.next())?.metadata?.parentDirectory\r\n            await this._db.collection(this.bucketName+\".files\").updateMany({\"metadata.path\":filePath},{$set:{\"metadata.path\":parentDirectory+`/${newName}`, \"filename\":newName}})\r\n\r\n            resolve()\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Update the metadata of a file in the file tree, allowing users to add, change, or delete metadata properties from files.\r\n     * Raises an error if the user tries to change or delete the 'path', 'parentDirectory', or 'isLatest' metadata properties from a file.\r\n     * @param {string} filePath Absolute path of the file that you want to change the metadata of\r\n     * @param {MetadataOptions} newMetadata Metadata properties to add or change the value of. Can have any property except the ones listed above.\r\n     * @param {Array<string>} deleteFields Metadata properties to delete. Can include any property except the ones listed above.\r\n     * @param {boolean} changeForAllVersions If false, only changes metadata properties for latest version of file.\r\n     * If true, changes metadata properties for all versions of the file. Defaults to false.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFileMetadata(\"sample-folder/sample.txt\", {favourite:true}, [\"sample-property\"], true)\r\n     */\r\n     changeFileMetadata(filePath: string, newMetadata?:MetadataOptions, deleteFields?:string[], changeForAllVersions: boolean= false): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            // @ts-ignore\r\n            if(newMetadata?.path || deleteFields?.includes('path')){\r\n                return reject(new Error(\"Cannot change or delete 'path' metadata property using this method\" ))\r\n            }\r\n            // @ts-ignore\r\n            if(newMetadata?.parentDirectory|| deleteFields?.includes('parentDirectory')){\r\n                return reject(new Error(\"Cannot change or delete 'parentDirectory' metadata property using this method\" ))\r\n            }\r\n            // @ts-ignore\r\n            if(newMetadata?.isLatest || deleteFields?.includes('isLatest')){\r\n                return reject(new Error(\"Cannot delete or change the type of 'isLatest' metadata property using this method\" ))\r\n            }\r\n            if(changeForAllVersions){\r\n                if(newMetadata){\r\n                    const fields: any = {}\r\n                    Object.keys(newMetadata).forEach((field: string)=>{\r\n                        // @ts-ignore\r\n                        fields[\"metadata.\"+field] = newMetadata[field]\r\n                    })\r\n                    await this._db.collection(this._bucketName+\".files\").updateMany({\"metadata.path\":filePath},{$set:fields})\r\n                }\r\n                if(deleteFields){\r\n\r\n                    const fields: any = {}\r\n                    deleteFields.forEach((field: string)=>{\r\n                        // @ts-ignore\r\n                        fields[\"metadata.\"+field] = \"\"\r\n                    })\r\n                    await this._db.collection(this._bucketName+\".files\").updateMany({\"metadata.path\":filePath},{$unset:fields})\r\n                }\r\n            }\r\n            else{\r\n                if(newMetadata){\r\n                    const fields: any = {}\r\n                    Object.keys(newMetadata).forEach((field: string)=>{\r\n                        // @ts-ignore\r\n                        fields[\"metadata.\"+field] = newMetadata[field]\r\n                    })\r\n                    await this._db.collection(this._bucketName+\".files\").findOneAndUpdate({\"metadata.isLatest\":true,\"metadata.path\":filePath},{$set:fields})\r\n                }\r\n                if(deleteFields){\r\n\r\n                    const fields: any = {}\r\n                    deleteFields.forEach((field: string)=>{\r\n                        // @ts-ignore\r\n                        fields[\"metadata.\"+field] = \"\"\r\n                    })\r\n                    await this._db.collection(this._bucketName+\".files\").findOneAndUpdate({\"metadata.isLatest\":true,\"metadata.path\":filePath},{$unset:fields})\r\n                }\r\n            }\r\n            resolve()\r\n        })\r\n    }\r\n    /**\r\n     * @description Update the metadata of a folder in the file tree, allowing users to add, change, or delete metadata properties from folders.\r\n     * Raises an error if the user tries to change or delete the 'path' and 'parentDirectory' properties from a folder.\r\n     * @param {string} folderPath Absolute path of the folder that you want to change the name of\r\n     * @param {MetadataOptions} newMetadata Metadata properties to add or change the value of. Can have any property except the ones listed above.\r\n     * @param {Array<string>} deleteFields Metadata properties to delete. Can have any property except the ones listed above.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFolderMetadata(\"sample-folder/subfolder\", {favorite:true}, [\"sample-property\"])\r\n     */\r\n    changeFolderMetadata(folderPath: string, newMetadata?:MetadataOptions, deleteFields?:string[]): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            \r\n            // @ts-ignore\r\n            if(newMetadata?.path || deleteFields?.includes('path')){\r\n                return reject(new Error(\"Cannot change or delete 'path' metadata property using this method\" ))\r\n            }\r\n            // @ts-ignore\r\n            if(newMetadata?.parentDirectory|| deleteFields?.includes('parentDirectory')){\r\n                return reject(new Error(\"Cannot change or delete 'parentDirectory' metadata property using this method\" ))\r\n            }\r\n            // @ts-ignore\r\n            if(newMetadata?.isLatest || deleteFields?.includes('isLatest')){\r\n                return reject(new Error(\"Cannot add or delete 'isLatest' metadata property for a folder\" ))\r\n            }\r\n\r\n            if(newMetadata){\r\n                const fields: any = {}\r\n                Object.keys(newMetadata).forEach((field: string)=>{\r\n                    // @ts-ignore\r\n                    fields[\"customMetadata.\"+field] = newMetadata[field]\r\n                })\r\n                await this._db.collection(this._folderCollectionName).findOneAndUpdate({\"path\":folderPath},{$set:fields})\r\n            }\r\n\r\n            if(deleteFields){\r\n                const fields: any = {}\r\n                deleteFields.forEach((field: string)=>{\r\n                    fields[\"customMetadata.\"+field] = \"\"\r\n                })\r\n                await this._db.collection(this._folderCollectionName).findOneAndUpdate({\"path\":folderPath},{$unset:fields})\r\n            }\r\n            resolve()\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Change the name of a folder in the file tree. This also changes its `path` metadata property accordingly,\r\n     * and the `path` and `parentDirectory` metadata property of all subfolders and files in the folder. Raises an error\r\n     * if the specified folder does not exist.\r\n     * @param {string} newName New name for the file\r\n     * @param {string} folderPath Absolute path of the folder that you want to change the name of\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.changeFolderName(\"new-folder-name\", \"sample-folder/sample-folder-2\")\r\n     */\r\n    changeFolderName(newName:string, folderPath:string): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n\r\n            if(folderPath === this._folderCollectionName){\r\n                return reject(new Error(`Cannot rename root directory of the file tree`))\r\n            }\r\n\r\n            const topFolder = await this._db.collection(this._folderCollectionName).findOne({\"path\":folderPath})\r\n\r\n            let newPath: string\r\n\r\n            if(!topFolder && folderPath !== this._folderCollectionName){\r\n                return reject(new Error(`Folder with path ${folderPath} does not exist`))\r\n            }\r\n\r\n            const doesFolderExist = Boolean(await this._db.collection(this._folderCollectionName).findOne({\"path\":topFolder?.parentDirectory+`/${newName}`}))\r\n\r\n            if(doesFolderExist){\r\n                return reject(new Error(`Folder with name ${newName} already exists in the specified directory`))\r\n            }\r\n\r\n            newPath = topFolder?.parentDirectory+`/${newName}`\r\n\r\n            if(newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)){\r\n                // @ts-ignore\r\n                const errSymbol = newName.match(/\\\\|[/$%?@\"'!$><\\s*&{}#=`|:+]/)[0]\r\n                return reject(new Error(`Character \"${errSymbol}\" cannot be used as part of a folder name`))\r\n            }\r\n\r\n            await this._db.collection(this._folderCollectionName).updateOne({\"path\":folderPath},{$set:{\"path\":newPath, \"name\":newName}})\r\n            await this._db.collection(this._folderCollectionName).updateMany({\"parentDirectory\":new RegExp(\"^\"+folderPath)},\r\n            {$set:{\"path\":\"hello\"}})\r\n            console.log(\"hello\")\r\n            await this._db.collection(this._bucketName+'.files').updateMany({\"metadata.parentDirectory\":new RegExp(\"^\"+folderPath)},\r\n            [{$set:{\"metadata.path\":\r\n            {$replaceOne:{\r\n                input:\"$metadata.path\",\r\n                find:folderPath,\r\n                replacement:newPath}},\r\n            \"metadata.parentDirectory\":\r\n            {$replaceOne:{\r\n                input:\"$metadata.parentDirectory\",\r\n                find:folderPath,\r\n                replacement:newPath}}\r\n            }}])\r\n\r\n            resolve()\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Changes the current working directory of the file tree to the absolute path of the directory\r\n     * specified by the `path` parameter, which is the folder where files uploaded by the `uploadFile` method and where new folders\r\n     * created by the `createFolder` method will be located. Will raise an error if a directory with\r\n     * the specified path does not exist.\r\n     * @param {string} path If parameter `isRelative` is false, or not provided, `path` should be a\r\n     * string representing the absolute path of a directory that exists in the collection specified by the\r\n     * `folderCollectionName` property. If parameter `isRelative` is true, `path` is assumed to be relative\r\n     * to the current working directory. The 'root directory' will have the same name as the `folderCollectionName`\r\n     * property.\r\n     * @param {boolean} isRelative If true, parameter `path` must be relative to the current working directory. If false, which is the default value,\r\n     * parameter `path` must be the absolute path of a file.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * //Absolute path, current working directory is now \"sample-folder/subfolder-sample\"\r\n     * await fileTree.changeDirectory(\"sample-folder/subfolder-sample\")\r\n     * //Relative path; absolute path of current working directory is now \"sample-folder/subfolder-sample/subfolder-sample-2\"\r\n     * await fileTree.changeDirectory(\"subfolder-sample-2\", true)\r\n     */\r\n    changeDirectory(path: string, isRelative: boolean = false): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n\r\n            let absolutePath\r\n            \r\n            if(!isRelative){\r\n                absolutePath = path\r\n            }\r\n\r\n            else{\r\n                absolutePath = this._currentWorkingDirectory+\"/\"+path\r\n            }\r\n            const folder = await this._db.collection(this._folderCollectionName).findOne({\"path\":absolutePath})\r\n            if(folder || absolutePath === this._folderCollectionName){\r\n                this._currentWorkingDirectory = absolutePath\r\n                resolve()\r\n            }\r\n            else{\r\n                return reject(new Error(`Folder with path ${absolutePath} does not exist`))\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * @description Deletes a folder from the file tree, including all versions of the files in it and its subfolders.\r\n     * If current working directory is about to be deleted, and it is not the root directory, raises en error.\r\n     * @param {string} folderPath Absolute path of a folder that exists in the collection\r\n     * specified by the `folderCollectionName` property, or the name of the folder storage collection (`folderCollectionName`)\r\n     * If `folderPath` is the same as `folderCollectionName`, the collection is not deleted, but all documents in it and\r\n     * files in the associated GridFS bucket of the file tree will still be deleted.\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.deleteFolder(\"sample-folder/subfolder-sample\")\r\n     */\r\n    deleteFolder(folderPath: string): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            \r\n            if(this._currentWorkingDirectory.match(folderPath) && folderPath !== this._folderCollectionName ){\r\n                return reject(new Error(`Cannot delete current working directory (${this._currentWorkingDirectory})`))\r\n            }\r\n\r\n            const topFolder = await this._db.collection(this._folderCollectionName).findOne({\"path\":folderPath})\r\n\r\n            if(!topFolder && folderPath !== this._folderCollectionName){\r\n                return reject(new Error(`Folder with path ${folderPath} does not exist`))\r\n            }\r\n\r\n            const allFiles: GridFSFile[] = await this._bucket.find({\"metadata.isLatest\":true, \"metadata.parentDirectory\":new RegExp(\"^\"+folderPath)}).toArray()\r\n\r\n\r\n            for(const file of allFiles){\r\n                await this.deleteFile(file.metadata?.path)\r\n            }\r\n            await this._db.collection(this._folderCollectionName).deleteMany({\"parentDirectory\":new RegExp(\"^\"+folderPath)})\r\n\r\n            if(folderPath !== this._folderCollectionName){\r\n                await this._db.collection(this._folderCollectionName).deleteOne({\"path\":folderPath})\r\n            }\r\n\r\n            resolve()\r\n        })\r\n    }\r\n    /**\r\n     * @description Deletes all the versions of a file from the GridFS bucket of the file tree.\r\n     * @param {string} filePath Absolute path to a file that exists in the bucket specified by the `bucket`\r\n     * property on the `FileTree` class\r\n     * @since 1.0.0\r\n     * @version 0.1.0\r\n     * @example\r\n     *\r\n     * const fileTree = new MongoFileTree(\"mongodb://localhost:27017\", \"GridFS-file-tree-management-sample\", \"sample-bucket\", \"sample-folder\")\r\n     * await fileTree.deleteFile(\"sample-folder/sample.txt\")\r\n     */\r\n    deleteFile(filePath: string): Promise<void>{\r\n        return new Promise<void>(async (resolve, reject)=>{\r\n            await this._client.connect()\r\n            const allFileVersions = this._bucket.find({\"metadata.path\":filePath})\r\n            if(!(await allFileVersions.hasNext())){\r\n                return reject(new Error(`File with path ${filePath} does not exist`))\r\n            }\r\n\r\n            const allFileVersionsArr = await allFileVersions.toArray()\r\n            for(const file of allFileVersionsArr){\r\n                await this._bucket.delete(file._id)\r\n            }\r\n            resolve()\r\n        })\r\n    }\r\n}\r\n\r\nexport default MongoFileTree\r\nexport {FileOptions, MetadataOptions}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"32d6cb53dae1a788d4064e174fed6b9679dd21a9","contentHash":"ab120d9976a6f0afc40150ff0f2e157f5f2f31df598d0c638d756c2c1e65bf64"}}